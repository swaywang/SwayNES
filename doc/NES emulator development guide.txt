




<!DOCTYPE html>
<html class="   ">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    
    <title>pyNES/docs/NES emulator development guide.txt at master Â· billymeter/pyNES</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <meta property="fb:app_id" content="1401488693436528"/>

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="billymeter/pyNES" name="twitter:title" /><meta content="pyNES - NES Emulator written in Python" name="twitter:description" /><meta content="https://avatars3.githubusercontent.com/u/129731?s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars3.githubusercontent.com/u/129731?s=400" property="og:image" /><meta content="billymeter/pyNES" property="og:title" /><meta content="https://github.com/billymeter/pyNES" property="og:url" /><meta content="pyNES - NES Emulator written in Python" property="og:description" />

    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035">
    <link rel="xhr-socket" href="/_sockets" />

    <meta name="msapplication-TileImage" content="/windows-tile.png" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="selected-link" value="repo_source" data-pjax-transient />
      <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="D317361E:5BD5:9AF5399:53C78669" name="octolytics-dimension-request_id" /><meta content="1230117" name="octolytics-actor-id" /><meta content="swaywang" name="octolytics-actor-login" /><meta content="007a3eb56be5cb48ef4651d11bf4ea75f31bf5502cf46e5b37094ff6c0c34a71" name="octolytics-actor-hash" />
    

    
    
    <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico" />


    <meta content="authenticity_token" name="csrf-param" />
<meta content="3d2PhLYTDacqULXJIkfzyHx4Ro5BD3cQRB1d3HwQRrxOkfakGXt1MNvtNTTCbXvfJE0cdg80ASd0OaG5ud95aA==" name="csrf-token" />

    <link href="https://assets-cdn.github.com/assets/github-c534ad575b5bb8c3cc3dce9c571df7aa7400dbe9.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://assets-cdn.github.com/assets/github2-84a1b6179d461213455892ab983182bc2052a7b5.css" media="all" rel="stylesheet" type="text/css" />
    


    <meta http-equiv="x-pjax-version" content="ef2e8ad48b4c98b3a1a0065370258ac2">

      
  <meta name="description" content="pyNES - NES Emulator written in Python" />


  <meta content="129731" name="octolytics-dimension-user_id" /><meta content="billymeter" name="octolytics-dimension-user_login" /><meta content="16333710" name="octolytics-dimension-repository_id" /><meta content="billymeter/pyNES" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="16333710" name="octolytics-dimension-repository_network_root_id" /><meta content="billymeter/pyNES" name="octolytics-dimension-repository_network_root_nwo" />

  <link href="https://github.com/billymeter/pyNES/commits/master.atom" rel="alternate" title="Recent Commits to pyNES:master" type="application/atom+xml" />

  </head>


  <body class="logged_in  env-production windows vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      <div class="header header-logged-in true">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/" aria-label="Homepage">
  <span class="mega-octicon octicon-mark-github"></span>
</a>


    
    <a href="/notifications" aria-label="You have unread notifications" class="notification-indicator tooltipped tooltipped-s" data-hotkey="g n">
        <span class="mail-status unread"></span>
</a>

      <div class="command-bar js-command-bar  in-repository">
          <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<div class="commandbar">
  <span class="message"></span>
  <input type="text" data-hotkey="s, /" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    data-username="swaywang"
    data-repo="billymeter/pyNES"
  >
  <div class="display hidden"></div>
</div>

    <input type="hidden" name="nwo" value="billymeter/pyNES" />

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target" role="button" aria-haspopup="true">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container" aria-hidden="true">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item js-this-repository-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked" />
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item js-all-repositories-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global" />
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="help tooltipped tooltipped-s" aria-label="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
        <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
            <li><a href="https://gist.github.com">Gist</a></li>
            <li><a href="/blog">Blog</a></li>
          <li><a href="https://help.github.com">Help</a></li>
        </ul>
      </div>

    

<ul id="user-links">
  <li>
    <a href="/swaywang" class="name">
      <img alt="Kuan-Hsun Wang" class=" js-avatar" data-user="1230117" height="20" src="https://avatars2.githubusercontent.com/u/1230117?s=140" width="20" /> swaywang
    </a>
  </li>

  <li class="new-menu dropdown-toggle js-menu-container">
    <a href="#" class="js-menu-target tooltipped tooltipped-s" aria-label="Create new...">
      <span class="octicon octicon-plus"></span>
      <span class="dropdown-arrow"></span>
    </a>

    <div class="new-menu-content js-menu-content">
    </div>
  </li>

  <li>
    <a href="/settings/profile" id="account_settings"
      class="tooltipped tooltipped-s"
      aria-label="Account settings ">
      <span class="octicon octicon-tools"></span>
    </a>
  </li>
  <li>
    <form accept-charset="UTF-8" action="/logout" class="logout-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="Ds7AG6ygdAEwPVVSeefoipUxYeEnotgu3XusDuVZytFdmc9cXQ9naqCbLA5rIQ3bBrj29I6QltUTBERaLEweGg==" /></div>
      <button class="sign-out-button tooltipped tooltipped-s" aria-label="Sign out">
        <span class="octicon octicon-sign-out"></span>
      </button>
</form>  </li>

</ul>

<div class="js-new-dropdown-contents hidden">
  

<ul class="dropdown-menu">
  <li>
    <a href="/new"><span class="octicon octicon-repo"></span> New repository</a>
  </li>
  <li>
    <a href="/organizations/new"><span class="octicon octicon-organization"></span> New organization</a>
  </li>


    <li class="section-title">
      <span title="billymeter/pyNES">This repository</span>
    </li>
      <li>
        <a href="/billymeter/pyNES/issues/new"><span class="octicon octicon-issue-opened"></span> New issue</a>
      </li>
</ul>

</div>


    
  </div>
</div>

      

        



      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    <div id="js-flash-container">
      
    </div>
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        
<ul class="pagehead-actions">

    <li class="subscription">
      <form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="c0WLITLxsr3RQBxXh3K6Jk1YgfP221zYfQgzh3MyA2IFPptIetPJvdWGg+mUtBCrT8pKO/K+3iywXF8wZ0l8Bw==" /></div>  <input id="repository_id" name="repository_id" type="hidden" value="16333710" />

    <div class="select-menu js-menu-container js-select-menu">
      <a class="social-count js-social-count" href="/billymeter/pyNES/watchers">
        4
      </a>
      <a href="/billymeter/pyNES/subscription"
        class="minibutton select-menu-button with-count js-menu-target" role="button" tabindex="0" aria-haspopup="true">
        <span class="js-select-button">
          <span class="octicon octicon-eye"></span>
          Watch
        </span>
      </a>

      <div class="select-menu-modal-holder">
        <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
          <div class="select-menu-header">
            <span class="select-menu-title">Notifications</span>
            <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-list js-navigation-container" role="menu">

            <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                <h4>Not watching</h4>
                <span class="description">Be notified when participating or @mentioned.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Watch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                <h4>Watching</h4>
                <span class="description">Be notified of all conversations.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Unwatch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_ignore" name="do" type="radio" value="ignore" />
                <h4>Ignoring</h4>
                <span class="description">Never be notified.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-mute"></span>
                  Stop ignoring
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

</form>
    </li>

  <li>
    

  <div class="js-toggler-container js-social-container starring-container ">

    <form accept-charset="UTF-8" action="/billymeter/pyNES/unstar" class="js-toggler-form starred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="5qHZ+5cUcaO7Ypvsmn5TskAjS6rr8wH3LWSaHZX/03naf8zXtJ+I8AMSHg71wdNPPHMvSOGo6LfxFmfegab9hw==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Unstar this repository" title="Unstar billymeter/pyNES">
        <span class="octicon octicon-star"></span>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/billymeter/pyNES/stargazers">
          3
        </a>
</form>
    <form accept-charset="UTF-8" action="/billymeter/pyNES/star" class="js-toggler-form unstarred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="D7JGYYGmuIWuVJW5AGF+Kibx0yy+/RyK+k2Z7PkXrGl1yuYLM6yDKj2uzmGd0itwwanI/Oz6DHv1Q7lvhq+Wfw==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Star this repository" title="Star billymeter/pyNES">
        <span class="octicon octicon-star"></span>
        Star
      </button>
        <a class="social-count js-social-count" href="/billymeter/pyNES/stargazers">
          3
        </a>
</form>  </div>

  </li>


        <li>
          <a href="/billymeter/pyNES/fork" class="minibutton with-count js-toggler-target fork-button lighter tooltipped-n" title="Fork your own copy of billymeter/pyNES to your account" aria-label="Fork your own copy of billymeter/pyNES to your account" rel="nofollow" data-method="post">
            <span class="octicon octicon-repo-forked"></span>
            Fork
          </a>
          <a href="/billymeter/pyNES/network" class="social-count">0</a>
        </li>

</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="repo-label"><span>public</span></span>
          <span class="mega-octicon octicon-repo"></span>
          <span class="author"><a href="/billymeter" class="url fn" itemprop="url" rel="author"><span itemprop="title">billymeter</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/billymeter/pyNES" class="js-current-repository js-repo-home-link">pyNES</a></strong>

          <span class="page-context-loader">
            <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline js-new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            

<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/billymeter/pyNES" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-hotkey="g c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /billymeter/pyNES">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/billymeter/pyNES/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g i" data-selected-links="repo_issues /billymeter/pyNES/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class='counter'>1</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/billymeter/pyNES/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g p" data-selected-links="repo_pulls /billymeter/pyNES/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class='counter'>0</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


        <li class="tooltipped tooltipped-w" aria-label="Wiki">
          <a href="/billymeter/pyNES/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g w" data-selected-links="repo_wiki /billymeter/pyNES/wiki">
            <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>
    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/billymeter/pyNES/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /billymeter/pyNES/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/billymeter/pyNES/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /billymeter/pyNES/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Network">
        <a href="/billymeter/pyNES/network" aria-label="Network" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-selected-links="repo_network /billymeter/pyNES/network">
          <span class="octicon octicon-repo-forked"></span> <span class="full-word">Network</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                

  

<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/billymeter/pyNES.git" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/billymeter/pyNES.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="ssh"
  data-url="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone">
  <h3><strong>SSH</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="git@github.com:billymeter/pyNES.git" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="git@github.com:billymeter/pyNES.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/billymeter/pyNES" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/billymeter/pyNES" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
      <a href="#" class="js-clone-selector" data-protocol="ssh">SSH</a>,
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</p>


  <a href="github-windows://openRepo/https://github.com/billymeter/pyNES" class="minibutton sidebar-button" title="Save billymeter/pyNES to your computer and use it in GitHub Desktop." aria-label="Save billymeter/pyNES to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-device-desktop"></span>
    Clone in Desktop
  </a>

                <a href="/billymeter/pyNES/archive/master.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download billymeter/pyNES as a zip file"
                   title="Download billymeter/pyNES as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          


<a href="/billymeter/pyNES/blob/ef9d4b1b0dd0a1054f68a757ca170a9c604318dc/docs/NES%20emulator%20development%20guide.txt" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:6ebe0c6f5678bcc731908f3507487640 -->

<p title="This is a placeholder element" class="js-history-link-replace hidden"></p>

<div class="file-navigation">
  

<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/billymeter/pyNES/blob/APUexperimental/docs/NES%20emulator%20development%20guide.txt"
                 data-name="APUexperimental"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="APUexperimental">APUexperimental</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/billymeter/pyNES/blob/addingPPU/docs/NES%20emulator%20development%20guide.txt"
                 data-name="addingPPU"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="addingPPU">addingPPU</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/billymeter/pyNES/blob/master/docs/NES%20emulator%20development%20guide.txt"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/billymeter/pyNES/blob/mockup/docs/NES%20emulator%20development%20guide.txt"
                 data-name="mockup"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="mockup">mockup</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/billymeter/pyNES/blob/optimizing/docs/NES%20emulator%20development%20guide.txt"
                 data-name="optimizing"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="optimizing">optimizing</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="button-group right">
    <a href="/billymeter/pyNES/find/master"
          class="js-show-file-finder minibutton empty-icon tooltipped tooltipped-s"
          data-pjax
          data-hotkey="t"
          aria-label="Quickly jump between files">
      <span class="octicon octicon-list-unordered"></span>
    </a>
    <button class="js-zeroclipboard minibutton zeroclipboard-button"
          data-clipboard-text="docs/NES emulator development guide.txt"
          aria-label="Copy to clipboard"
          data-copied-hint="Copied!">
      <span class="octicon octicon-clippy"></span>
    </button>
  </div>

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/billymeter/pyNES" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">pyNES</span></a></span></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/billymeter/pyNES/tree/master/docs" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">docs</span></a></span><span class="separator"> / </span><strong class="final-path">NES emulator development guide.txt</strong>
  </div>
</div>


  <div class="commit commit-loader file-history-tease js-deferred-content" data-url="/billymeter/pyNES/contributors/master/docs/NES%20emulator%20development%20guide.txt">
    Fetching contributorsâ¦

    <div class="participation">
      <p class="loader-loading"><img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" /></p>
      <p class="loader-error">Cannot retrieve contributors at this time</p>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
        <span class="icon"><b class="octicon octicon-file-text"></b></span>
        <span class="mode" title="File Mode">file</span>
        <span class="meta-divider"></span>
          <span>1514 lines (1298 sloc)</span>
          <span class="meta-divider"></span>
        <span>82.455 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
            <a class="minibutton tooltipped tooltipped-w"
               href="github-windows://openRepo/https://github.com/billymeter/pyNES?branch=master&amp;filepath=docs%2FNES%20emulator%20development%20guide.txt" aria-label="Open this file in GitHub for Windows">
                <span class="octicon octicon-device-desktop"></span> Open
            </a>
                <a class="minibutton tooltipped tooltipped-n js-update-url-with-hash"
                   aria-label="Clicking this button will automatically fork this project so you can edit the file"
                   href="/billymeter/pyNES/edit/master/docs/NES%20emulator%20development%20guide.txt"
                   data-method="post" rel="nofollow">Edit</a>
          <a href="/billymeter/pyNES/raw/master/docs/NES%20emulator%20development%20guide.txt" class="minibutton " id="raw-url">Raw</a>
            <a href="/billymeter/pyNES/blame/master/docs/NES%20emulator%20development%20guide.txt" class="minibutton js-update-url-with-hash">Blame</a>
          <a href="/billymeter/pyNES/commits/master/docs/NES%20emulator%20development%20guide.txt" class="minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->

            <a class="minibutton danger empty-icon tooltipped tooltipped-s"
               href="/billymeter/pyNES/delete/master/docs/NES%20emulator%20development%20guide.txt"
               aria-label="Fork this project and delete file"
               data-method="post" data-test-id="delete-blob-file" rel="nofollow">

          Delete
        </a>
      </div><!-- /.actions -->
    </div>
      
  <div class="blob-wrapper data type-text js-blob-data">
       <table class="file-code file-diff tab-size-8">
         <tr class="file-code-line">
           <td class="blob-line-nums">
             <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>
<span id="L8" rel="#L8">8</span>
<span id="L9" rel="#L9">9</span>
<span id="L10" rel="#L10">10</span>
<span id="L11" rel="#L11">11</span>
<span id="L12" rel="#L12">12</span>
<span id="L13" rel="#L13">13</span>
<span id="L14" rel="#L14">14</span>
<span id="L15" rel="#L15">15</span>
<span id="L16" rel="#L16">16</span>
<span id="L17" rel="#L17">17</span>
<span id="L18" rel="#L18">18</span>
<span id="L19" rel="#L19">19</span>
<span id="L20" rel="#L20">20</span>
<span id="L21" rel="#L21">21</span>
<span id="L22" rel="#L22">22</span>
<span id="L23" rel="#L23">23</span>
<span id="L24" rel="#L24">24</span>
<span id="L25" rel="#L25">25</span>
<span id="L26" rel="#L26">26</span>
<span id="L27" rel="#L27">27</span>
<span id="L28" rel="#L28">28</span>
<span id="L29" rel="#L29">29</span>
<span id="L30" rel="#L30">30</span>
<span id="L31" rel="#L31">31</span>
<span id="L32" rel="#L32">32</span>
<span id="L33" rel="#L33">33</span>
<span id="L34" rel="#L34">34</span>
<span id="L35" rel="#L35">35</span>
<span id="L36" rel="#L36">36</span>
<span id="L37" rel="#L37">37</span>
<span id="L38" rel="#L38">38</span>
<span id="L39" rel="#L39">39</span>
<span id="L40" rel="#L40">40</span>
<span id="L41" rel="#L41">41</span>
<span id="L42" rel="#L42">42</span>
<span id="L43" rel="#L43">43</span>
<span id="L44" rel="#L44">44</span>
<span id="L45" rel="#L45">45</span>
<span id="L46" rel="#L46">46</span>
<span id="L47" rel="#L47">47</span>
<span id="L48" rel="#L48">48</span>
<span id="L49" rel="#L49">49</span>
<span id="L50" rel="#L50">50</span>
<span id="L51" rel="#L51">51</span>
<span id="L52" rel="#L52">52</span>
<span id="L53" rel="#L53">53</span>
<span id="L54" rel="#L54">54</span>
<span id="L55" rel="#L55">55</span>
<span id="L56" rel="#L56">56</span>
<span id="L57" rel="#L57">57</span>
<span id="L58" rel="#L58">58</span>
<span id="L59" rel="#L59">59</span>
<span id="L60" rel="#L60">60</span>
<span id="L61" rel="#L61">61</span>
<span id="L62" rel="#L62">62</span>
<span id="L63" rel="#L63">63</span>
<span id="L64" rel="#L64">64</span>
<span id="L65" rel="#L65">65</span>
<span id="L66" rel="#L66">66</span>
<span id="L67" rel="#L67">67</span>
<span id="L68" rel="#L68">68</span>
<span id="L69" rel="#L69">69</span>
<span id="L70" rel="#L70">70</span>
<span id="L71" rel="#L71">71</span>
<span id="L72" rel="#L72">72</span>
<span id="L73" rel="#L73">73</span>
<span id="L74" rel="#L74">74</span>
<span id="L75" rel="#L75">75</span>
<span id="L76" rel="#L76">76</span>
<span id="L77" rel="#L77">77</span>
<span id="L78" rel="#L78">78</span>
<span id="L79" rel="#L79">79</span>
<span id="L80" rel="#L80">80</span>
<span id="L81" rel="#L81">81</span>
<span id="L82" rel="#L82">82</span>
<span id="L83" rel="#L83">83</span>
<span id="L84" rel="#L84">84</span>
<span id="L85" rel="#L85">85</span>
<span id="L86" rel="#L86">86</span>
<span id="L87" rel="#L87">87</span>
<span id="L88" rel="#L88">88</span>
<span id="L89" rel="#L89">89</span>
<span id="L90" rel="#L90">90</span>
<span id="L91" rel="#L91">91</span>
<span id="L92" rel="#L92">92</span>
<span id="L93" rel="#L93">93</span>
<span id="L94" rel="#L94">94</span>
<span id="L95" rel="#L95">95</span>
<span id="L96" rel="#L96">96</span>
<span id="L97" rel="#L97">97</span>
<span id="L98" rel="#L98">98</span>
<span id="L99" rel="#L99">99</span>
<span id="L100" rel="#L100">100</span>
<span id="L101" rel="#L101">101</span>
<span id="L102" rel="#L102">102</span>
<span id="L103" rel="#L103">103</span>
<span id="L104" rel="#L104">104</span>
<span id="L105" rel="#L105">105</span>
<span id="L106" rel="#L106">106</span>
<span id="L107" rel="#L107">107</span>
<span id="L108" rel="#L108">108</span>
<span id="L109" rel="#L109">109</span>
<span id="L110" rel="#L110">110</span>
<span id="L111" rel="#L111">111</span>
<span id="L112" rel="#L112">112</span>
<span id="L113" rel="#L113">113</span>
<span id="L114" rel="#L114">114</span>
<span id="L115" rel="#L115">115</span>
<span id="L116" rel="#L116">116</span>
<span id="L117" rel="#L117">117</span>
<span id="L118" rel="#L118">118</span>
<span id="L119" rel="#L119">119</span>
<span id="L120" rel="#L120">120</span>
<span id="L121" rel="#L121">121</span>
<span id="L122" rel="#L122">122</span>
<span id="L123" rel="#L123">123</span>
<span id="L124" rel="#L124">124</span>
<span id="L125" rel="#L125">125</span>
<span id="L126" rel="#L126">126</span>
<span id="L127" rel="#L127">127</span>
<span id="L128" rel="#L128">128</span>
<span id="L129" rel="#L129">129</span>
<span id="L130" rel="#L130">130</span>
<span id="L131" rel="#L131">131</span>
<span id="L132" rel="#L132">132</span>
<span id="L133" rel="#L133">133</span>
<span id="L134" rel="#L134">134</span>
<span id="L135" rel="#L135">135</span>
<span id="L136" rel="#L136">136</span>
<span id="L137" rel="#L137">137</span>
<span id="L138" rel="#L138">138</span>
<span id="L139" rel="#L139">139</span>
<span id="L140" rel="#L140">140</span>
<span id="L141" rel="#L141">141</span>
<span id="L142" rel="#L142">142</span>
<span id="L143" rel="#L143">143</span>
<span id="L144" rel="#L144">144</span>
<span id="L145" rel="#L145">145</span>
<span id="L146" rel="#L146">146</span>
<span id="L147" rel="#L147">147</span>
<span id="L148" rel="#L148">148</span>
<span id="L149" rel="#L149">149</span>
<span id="L150" rel="#L150">150</span>
<span id="L151" rel="#L151">151</span>
<span id="L152" rel="#L152">152</span>
<span id="L153" rel="#L153">153</span>
<span id="L154" rel="#L154">154</span>
<span id="L155" rel="#L155">155</span>
<span id="L156" rel="#L156">156</span>
<span id="L157" rel="#L157">157</span>
<span id="L158" rel="#L158">158</span>
<span id="L159" rel="#L159">159</span>
<span id="L160" rel="#L160">160</span>
<span id="L161" rel="#L161">161</span>
<span id="L162" rel="#L162">162</span>
<span id="L163" rel="#L163">163</span>
<span id="L164" rel="#L164">164</span>
<span id="L165" rel="#L165">165</span>
<span id="L166" rel="#L166">166</span>
<span id="L167" rel="#L167">167</span>
<span id="L168" rel="#L168">168</span>
<span id="L169" rel="#L169">169</span>
<span id="L170" rel="#L170">170</span>
<span id="L171" rel="#L171">171</span>
<span id="L172" rel="#L172">172</span>
<span id="L173" rel="#L173">173</span>
<span id="L174" rel="#L174">174</span>
<span id="L175" rel="#L175">175</span>
<span id="L176" rel="#L176">176</span>
<span id="L177" rel="#L177">177</span>
<span id="L178" rel="#L178">178</span>
<span id="L179" rel="#L179">179</span>
<span id="L180" rel="#L180">180</span>
<span id="L181" rel="#L181">181</span>
<span id="L182" rel="#L182">182</span>
<span id="L183" rel="#L183">183</span>
<span id="L184" rel="#L184">184</span>
<span id="L185" rel="#L185">185</span>
<span id="L186" rel="#L186">186</span>
<span id="L187" rel="#L187">187</span>
<span id="L188" rel="#L188">188</span>
<span id="L189" rel="#L189">189</span>
<span id="L190" rel="#L190">190</span>
<span id="L191" rel="#L191">191</span>
<span id="L192" rel="#L192">192</span>
<span id="L193" rel="#L193">193</span>
<span id="L194" rel="#L194">194</span>
<span id="L195" rel="#L195">195</span>
<span id="L196" rel="#L196">196</span>
<span id="L197" rel="#L197">197</span>
<span id="L198" rel="#L198">198</span>
<span id="L199" rel="#L199">199</span>
<span id="L200" rel="#L200">200</span>
<span id="L201" rel="#L201">201</span>
<span id="L202" rel="#L202">202</span>
<span id="L203" rel="#L203">203</span>
<span id="L204" rel="#L204">204</span>
<span id="L205" rel="#L205">205</span>
<span id="L206" rel="#L206">206</span>
<span id="L207" rel="#L207">207</span>
<span id="L208" rel="#L208">208</span>
<span id="L209" rel="#L209">209</span>
<span id="L210" rel="#L210">210</span>
<span id="L211" rel="#L211">211</span>
<span id="L212" rel="#L212">212</span>
<span id="L213" rel="#L213">213</span>
<span id="L214" rel="#L214">214</span>
<span id="L215" rel="#L215">215</span>
<span id="L216" rel="#L216">216</span>
<span id="L217" rel="#L217">217</span>
<span id="L218" rel="#L218">218</span>
<span id="L219" rel="#L219">219</span>
<span id="L220" rel="#L220">220</span>
<span id="L221" rel="#L221">221</span>
<span id="L222" rel="#L222">222</span>
<span id="L223" rel="#L223">223</span>
<span id="L224" rel="#L224">224</span>
<span id="L225" rel="#L225">225</span>
<span id="L226" rel="#L226">226</span>
<span id="L227" rel="#L227">227</span>
<span id="L228" rel="#L228">228</span>
<span id="L229" rel="#L229">229</span>
<span id="L230" rel="#L230">230</span>
<span id="L231" rel="#L231">231</span>
<span id="L232" rel="#L232">232</span>
<span id="L233" rel="#L233">233</span>
<span id="L234" rel="#L234">234</span>
<span id="L235" rel="#L235">235</span>
<span id="L236" rel="#L236">236</span>
<span id="L237" rel="#L237">237</span>
<span id="L238" rel="#L238">238</span>
<span id="L239" rel="#L239">239</span>
<span id="L240" rel="#L240">240</span>
<span id="L241" rel="#L241">241</span>
<span id="L242" rel="#L242">242</span>
<span id="L243" rel="#L243">243</span>
<span id="L244" rel="#L244">244</span>
<span id="L245" rel="#L245">245</span>
<span id="L246" rel="#L246">246</span>
<span id="L247" rel="#L247">247</span>
<span id="L248" rel="#L248">248</span>
<span id="L249" rel="#L249">249</span>
<span id="L250" rel="#L250">250</span>
<span id="L251" rel="#L251">251</span>
<span id="L252" rel="#L252">252</span>
<span id="L253" rel="#L253">253</span>
<span id="L254" rel="#L254">254</span>
<span id="L255" rel="#L255">255</span>
<span id="L256" rel="#L256">256</span>
<span id="L257" rel="#L257">257</span>
<span id="L258" rel="#L258">258</span>
<span id="L259" rel="#L259">259</span>
<span id="L260" rel="#L260">260</span>
<span id="L261" rel="#L261">261</span>
<span id="L262" rel="#L262">262</span>
<span id="L263" rel="#L263">263</span>
<span id="L264" rel="#L264">264</span>
<span id="L265" rel="#L265">265</span>
<span id="L266" rel="#L266">266</span>
<span id="L267" rel="#L267">267</span>
<span id="L268" rel="#L268">268</span>
<span id="L269" rel="#L269">269</span>
<span id="L270" rel="#L270">270</span>
<span id="L271" rel="#L271">271</span>
<span id="L272" rel="#L272">272</span>
<span id="L273" rel="#L273">273</span>
<span id="L274" rel="#L274">274</span>
<span id="L275" rel="#L275">275</span>
<span id="L276" rel="#L276">276</span>
<span id="L277" rel="#L277">277</span>
<span id="L278" rel="#L278">278</span>
<span id="L279" rel="#L279">279</span>
<span id="L280" rel="#L280">280</span>
<span id="L281" rel="#L281">281</span>
<span id="L282" rel="#L282">282</span>
<span id="L283" rel="#L283">283</span>
<span id="L284" rel="#L284">284</span>
<span id="L285" rel="#L285">285</span>
<span id="L286" rel="#L286">286</span>
<span id="L287" rel="#L287">287</span>
<span id="L288" rel="#L288">288</span>
<span id="L289" rel="#L289">289</span>
<span id="L290" rel="#L290">290</span>
<span id="L291" rel="#L291">291</span>
<span id="L292" rel="#L292">292</span>
<span id="L293" rel="#L293">293</span>
<span id="L294" rel="#L294">294</span>
<span id="L295" rel="#L295">295</span>
<span id="L296" rel="#L296">296</span>
<span id="L297" rel="#L297">297</span>
<span id="L298" rel="#L298">298</span>
<span id="L299" rel="#L299">299</span>
<span id="L300" rel="#L300">300</span>
<span id="L301" rel="#L301">301</span>
<span id="L302" rel="#L302">302</span>
<span id="L303" rel="#L303">303</span>
<span id="L304" rel="#L304">304</span>
<span id="L305" rel="#L305">305</span>
<span id="L306" rel="#L306">306</span>
<span id="L307" rel="#L307">307</span>
<span id="L308" rel="#L308">308</span>
<span id="L309" rel="#L309">309</span>
<span id="L310" rel="#L310">310</span>
<span id="L311" rel="#L311">311</span>
<span id="L312" rel="#L312">312</span>
<span id="L313" rel="#L313">313</span>
<span id="L314" rel="#L314">314</span>
<span id="L315" rel="#L315">315</span>
<span id="L316" rel="#L316">316</span>
<span id="L317" rel="#L317">317</span>
<span id="L318" rel="#L318">318</span>
<span id="L319" rel="#L319">319</span>
<span id="L320" rel="#L320">320</span>
<span id="L321" rel="#L321">321</span>
<span id="L322" rel="#L322">322</span>
<span id="L323" rel="#L323">323</span>
<span id="L324" rel="#L324">324</span>
<span id="L325" rel="#L325">325</span>
<span id="L326" rel="#L326">326</span>
<span id="L327" rel="#L327">327</span>
<span id="L328" rel="#L328">328</span>
<span id="L329" rel="#L329">329</span>
<span id="L330" rel="#L330">330</span>
<span id="L331" rel="#L331">331</span>
<span id="L332" rel="#L332">332</span>
<span id="L333" rel="#L333">333</span>
<span id="L334" rel="#L334">334</span>
<span id="L335" rel="#L335">335</span>
<span id="L336" rel="#L336">336</span>
<span id="L337" rel="#L337">337</span>
<span id="L338" rel="#L338">338</span>
<span id="L339" rel="#L339">339</span>
<span id="L340" rel="#L340">340</span>
<span id="L341" rel="#L341">341</span>
<span id="L342" rel="#L342">342</span>
<span id="L343" rel="#L343">343</span>
<span id="L344" rel="#L344">344</span>
<span id="L345" rel="#L345">345</span>
<span id="L346" rel="#L346">346</span>
<span id="L347" rel="#L347">347</span>
<span id="L348" rel="#L348">348</span>
<span id="L349" rel="#L349">349</span>
<span id="L350" rel="#L350">350</span>
<span id="L351" rel="#L351">351</span>
<span id="L352" rel="#L352">352</span>
<span id="L353" rel="#L353">353</span>
<span id="L354" rel="#L354">354</span>
<span id="L355" rel="#L355">355</span>
<span id="L356" rel="#L356">356</span>
<span id="L357" rel="#L357">357</span>
<span id="L358" rel="#L358">358</span>
<span id="L359" rel="#L359">359</span>
<span id="L360" rel="#L360">360</span>
<span id="L361" rel="#L361">361</span>
<span id="L362" rel="#L362">362</span>
<span id="L363" rel="#L363">363</span>
<span id="L364" rel="#L364">364</span>
<span id="L365" rel="#L365">365</span>
<span id="L366" rel="#L366">366</span>
<span id="L367" rel="#L367">367</span>
<span id="L368" rel="#L368">368</span>
<span id="L369" rel="#L369">369</span>
<span id="L370" rel="#L370">370</span>
<span id="L371" rel="#L371">371</span>
<span id="L372" rel="#L372">372</span>
<span id="L373" rel="#L373">373</span>
<span id="L374" rel="#L374">374</span>
<span id="L375" rel="#L375">375</span>
<span id="L376" rel="#L376">376</span>
<span id="L377" rel="#L377">377</span>
<span id="L378" rel="#L378">378</span>
<span id="L379" rel="#L379">379</span>
<span id="L380" rel="#L380">380</span>
<span id="L381" rel="#L381">381</span>
<span id="L382" rel="#L382">382</span>
<span id="L383" rel="#L383">383</span>
<span id="L384" rel="#L384">384</span>
<span id="L385" rel="#L385">385</span>
<span id="L386" rel="#L386">386</span>
<span id="L387" rel="#L387">387</span>
<span id="L388" rel="#L388">388</span>
<span id="L389" rel="#L389">389</span>
<span id="L390" rel="#L390">390</span>
<span id="L391" rel="#L391">391</span>
<span id="L392" rel="#L392">392</span>
<span id="L393" rel="#L393">393</span>
<span id="L394" rel="#L394">394</span>
<span id="L395" rel="#L395">395</span>
<span id="L396" rel="#L396">396</span>
<span id="L397" rel="#L397">397</span>
<span id="L398" rel="#L398">398</span>
<span id="L399" rel="#L399">399</span>
<span id="L400" rel="#L400">400</span>
<span id="L401" rel="#L401">401</span>
<span id="L402" rel="#L402">402</span>
<span id="L403" rel="#L403">403</span>
<span id="L404" rel="#L404">404</span>
<span id="L405" rel="#L405">405</span>
<span id="L406" rel="#L406">406</span>
<span id="L407" rel="#L407">407</span>
<span id="L408" rel="#L408">408</span>
<span id="L409" rel="#L409">409</span>
<span id="L410" rel="#L410">410</span>
<span id="L411" rel="#L411">411</span>
<span id="L412" rel="#L412">412</span>
<span id="L413" rel="#L413">413</span>
<span id="L414" rel="#L414">414</span>
<span id="L415" rel="#L415">415</span>
<span id="L416" rel="#L416">416</span>
<span id="L417" rel="#L417">417</span>
<span id="L418" rel="#L418">418</span>
<span id="L419" rel="#L419">419</span>
<span id="L420" rel="#L420">420</span>
<span id="L421" rel="#L421">421</span>
<span id="L422" rel="#L422">422</span>
<span id="L423" rel="#L423">423</span>
<span id="L424" rel="#L424">424</span>
<span id="L425" rel="#L425">425</span>
<span id="L426" rel="#L426">426</span>
<span id="L427" rel="#L427">427</span>
<span id="L428" rel="#L428">428</span>
<span id="L429" rel="#L429">429</span>
<span id="L430" rel="#L430">430</span>
<span id="L431" rel="#L431">431</span>
<span id="L432" rel="#L432">432</span>
<span id="L433" rel="#L433">433</span>
<span id="L434" rel="#L434">434</span>
<span id="L435" rel="#L435">435</span>
<span id="L436" rel="#L436">436</span>
<span id="L437" rel="#L437">437</span>
<span id="L438" rel="#L438">438</span>
<span id="L439" rel="#L439">439</span>
<span id="L440" rel="#L440">440</span>
<span id="L441" rel="#L441">441</span>
<span id="L442" rel="#L442">442</span>
<span id="L443" rel="#L443">443</span>
<span id="L444" rel="#L444">444</span>
<span id="L445" rel="#L445">445</span>
<span id="L446" rel="#L446">446</span>
<span id="L447" rel="#L447">447</span>
<span id="L448" rel="#L448">448</span>
<span id="L449" rel="#L449">449</span>
<span id="L450" rel="#L450">450</span>
<span id="L451" rel="#L451">451</span>
<span id="L452" rel="#L452">452</span>
<span id="L453" rel="#L453">453</span>
<span id="L454" rel="#L454">454</span>
<span id="L455" rel="#L455">455</span>
<span id="L456" rel="#L456">456</span>
<span id="L457" rel="#L457">457</span>
<span id="L458" rel="#L458">458</span>
<span id="L459" rel="#L459">459</span>
<span id="L460" rel="#L460">460</span>
<span id="L461" rel="#L461">461</span>
<span id="L462" rel="#L462">462</span>
<span id="L463" rel="#L463">463</span>
<span id="L464" rel="#L464">464</span>
<span id="L465" rel="#L465">465</span>
<span id="L466" rel="#L466">466</span>
<span id="L467" rel="#L467">467</span>
<span id="L468" rel="#L468">468</span>
<span id="L469" rel="#L469">469</span>
<span id="L470" rel="#L470">470</span>
<span id="L471" rel="#L471">471</span>
<span id="L472" rel="#L472">472</span>
<span id="L473" rel="#L473">473</span>
<span id="L474" rel="#L474">474</span>
<span id="L475" rel="#L475">475</span>
<span id="L476" rel="#L476">476</span>
<span id="L477" rel="#L477">477</span>
<span id="L478" rel="#L478">478</span>
<span id="L479" rel="#L479">479</span>
<span id="L480" rel="#L480">480</span>
<span id="L481" rel="#L481">481</span>
<span id="L482" rel="#L482">482</span>
<span id="L483" rel="#L483">483</span>
<span id="L484" rel="#L484">484</span>
<span id="L485" rel="#L485">485</span>
<span id="L486" rel="#L486">486</span>
<span id="L487" rel="#L487">487</span>
<span id="L488" rel="#L488">488</span>
<span id="L489" rel="#L489">489</span>
<span id="L490" rel="#L490">490</span>
<span id="L491" rel="#L491">491</span>
<span id="L492" rel="#L492">492</span>
<span id="L493" rel="#L493">493</span>
<span id="L494" rel="#L494">494</span>
<span id="L495" rel="#L495">495</span>
<span id="L496" rel="#L496">496</span>
<span id="L497" rel="#L497">497</span>
<span id="L498" rel="#L498">498</span>
<span id="L499" rel="#L499">499</span>
<span id="L500" rel="#L500">500</span>
<span id="L501" rel="#L501">501</span>
<span id="L502" rel="#L502">502</span>
<span id="L503" rel="#L503">503</span>
<span id="L504" rel="#L504">504</span>
<span id="L505" rel="#L505">505</span>
<span id="L506" rel="#L506">506</span>
<span id="L507" rel="#L507">507</span>
<span id="L508" rel="#L508">508</span>
<span id="L509" rel="#L509">509</span>
<span id="L510" rel="#L510">510</span>
<span id="L511" rel="#L511">511</span>
<span id="L512" rel="#L512">512</span>
<span id="L513" rel="#L513">513</span>
<span id="L514" rel="#L514">514</span>
<span id="L515" rel="#L515">515</span>
<span id="L516" rel="#L516">516</span>
<span id="L517" rel="#L517">517</span>
<span id="L518" rel="#L518">518</span>
<span id="L519" rel="#L519">519</span>
<span id="L520" rel="#L520">520</span>
<span id="L521" rel="#L521">521</span>
<span id="L522" rel="#L522">522</span>
<span id="L523" rel="#L523">523</span>
<span id="L524" rel="#L524">524</span>
<span id="L525" rel="#L525">525</span>
<span id="L526" rel="#L526">526</span>
<span id="L527" rel="#L527">527</span>
<span id="L528" rel="#L528">528</span>
<span id="L529" rel="#L529">529</span>
<span id="L530" rel="#L530">530</span>
<span id="L531" rel="#L531">531</span>
<span id="L532" rel="#L532">532</span>
<span id="L533" rel="#L533">533</span>
<span id="L534" rel="#L534">534</span>
<span id="L535" rel="#L535">535</span>
<span id="L536" rel="#L536">536</span>
<span id="L537" rel="#L537">537</span>
<span id="L538" rel="#L538">538</span>
<span id="L539" rel="#L539">539</span>
<span id="L540" rel="#L540">540</span>
<span id="L541" rel="#L541">541</span>
<span id="L542" rel="#L542">542</span>
<span id="L543" rel="#L543">543</span>
<span id="L544" rel="#L544">544</span>
<span id="L545" rel="#L545">545</span>
<span id="L546" rel="#L546">546</span>
<span id="L547" rel="#L547">547</span>
<span id="L548" rel="#L548">548</span>
<span id="L549" rel="#L549">549</span>
<span id="L550" rel="#L550">550</span>
<span id="L551" rel="#L551">551</span>
<span id="L552" rel="#L552">552</span>
<span id="L553" rel="#L553">553</span>
<span id="L554" rel="#L554">554</span>
<span id="L555" rel="#L555">555</span>
<span id="L556" rel="#L556">556</span>
<span id="L557" rel="#L557">557</span>
<span id="L558" rel="#L558">558</span>
<span id="L559" rel="#L559">559</span>
<span id="L560" rel="#L560">560</span>
<span id="L561" rel="#L561">561</span>
<span id="L562" rel="#L562">562</span>
<span id="L563" rel="#L563">563</span>
<span id="L564" rel="#L564">564</span>
<span id="L565" rel="#L565">565</span>
<span id="L566" rel="#L566">566</span>
<span id="L567" rel="#L567">567</span>
<span id="L568" rel="#L568">568</span>
<span id="L569" rel="#L569">569</span>
<span id="L570" rel="#L570">570</span>
<span id="L571" rel="#L571">571</span>
<span id="L572" rel="#L572">572</span>
<span id="L573" rel="#L573">573</span>
<span id="L574" rel="#L574">574</span>
<span id="L575" rel="#L575">575</span>
<span id="L576" rel="#L576">576</span>
<span id="L577" rel="#L577">577</span>
<span id="L578" rel="#L578">578</span>
<span id="L579" rel="#L579">579</span>
<span id="L580" rel="#L580">580</span>
<span id="L581" rel="#L581">581</span>
<span id="L582" rel="#L582">582</span>
<span id="L583" rel="#L583">583</span>
<span id="L584" rel="#L584">584</span>
<span id="L585" rel="#L585">585</span>
<span id="L586" rel="#L586">586</span>
<span id="L587" rel="#L587">587</span>
<span id="L588" rel="#L588">588</span>
<span id="L589" rel="#L589">589</span>
<span id="L590" rel="#L590">590</span>
<span id="L591" rel="#L591">591</span>
<span id="L592" rel="#L592">592</span>
<span id="L593" rel="#L593">593</span>
<span id="L594" rel="#L594">594</span>
<span id="L595" rel="#L595">595</span>
<span id="L596" rel="#L596">596</span>
<span id="L597" rel="#L597">597</span>
<span id="L598" rel="#L598">598</span>
<span id="L599" rel="#L599">599</span>
<span id="L600" rel="#L600">600</span>
<span id="L601" rel="#L601">601</span>
<span id="L602" rel="#L602">602</span>
<span id="L603" rel="#L603">603</span>
<span id="L604" rel="#L604">604</span>
<span id="L605" rel="#L605">605</span>
<span id="L606" rel="#L606">606</span>
<span id="L607" rel="#L607">607</span>
<span id="L608" rel="#L608">608</span>
<span id="L609" rel="#L609">609</span>
<span id="L610" rel="#L610">610</span>
<span id="L611" rel="#L611">611</span>
<span id="L612" rel="#L612">612</span>
<span id="L613" rel="#L613">613</span>
<span id="L614" rel="#L614">614</span>
<span id="L615" rel="#L615">615</span>
<span id="L616" rel="#L616">616</span>
<span id="L617" rel="#L617">617</span>
<span id="L618" rel="#L618">618</span>
<span id="L619" rel="#L619">619</span>
<span id="L620" rel="#L620">620</span>
<span id="L621" rel="#L621">621</span>
<span id="L622" rel="#L622">622</span>
<span id="L623" rel="#L623">623</span>
<span id="L624" rel="#L624">624</span>
<span id="L625" rel="#L625">625</span>
<span id="L626" rel="#L626">626</span>
<span id="L627" rel="#L627">627</span>
<span id="L628" rel="#L628">628</span>
<span id="L629" rel="#L629">629</span>
<span id="L630" rel="#L630">630</span>
<span id="L631" rel="#L631">631</span>
<span id="L632" rel="#L632">632</span>
<span id="L633" rel="#L633">633</span>
<span id="L634" rel="#L634">634</span>
<span id="L635" rel="#L635">635</span>
<span id="L636" rel="#L636">636</span>
<span id="L637" rel="#L637">637</span>
<span id="L638" rel="#L638">638</span>
<span id="L639" rel="#L639">639</span>
<span id="L640" rel="#L640">640</span>
<span id="L641" rel="#L641">641</span>
<span id="L642" rel="#L642">642</span>
<span id="L643" rel="#L643">643</span>
<span id="L644" rel="#L644">644</span>
<span id="L645" rel="#L645">645</span>
<span id="L646" rel="#L646">646</span>
<span id="L647" rel="#L647">647</span>
<span id="L648" rel="#L648">648</span>
<span id="L649" rel="#L649">649</span>
<span id="L650" rel="#L650">650</span>
<span id="L651" rel="#L651">651</span>
<span id="L652" rel="#L652">652</span>
<span id="L653" rel="#L653">653</span>
<span id="L654" rel="#L654">654</span>
<span id="L655" rel="#L655">655</span>
<span id="L656" rel="#L656">656</span>
<span id="L657" rel="#L657">657</span>
<span id="L658" rel="#L658">658</span>
<span id="L659" rel="#L659">659</span>
<span id="L660" rel="#L660">660</span>
<span id="L661" rel="#L661">661</span>
<span id="L662" rel="#L662">662</span>
<span id="L663" rel="#L663">663</span>
<span id="L664" rel="#L664">664</span>
<span id="L665" rel="#L665">665</span>
<span id="L666" rel="#L666">666</span>
<span id="L667" rel="#L667">667</span>
<span id="L668" rel="#L668">668</span>
<span id="L669" rel="#L669">669</span>
<span id="L670" rel="#L670">670</span>
<span id="L671" rel="#L671">671</span>
<span id="L672" rel="#L672">672</span>
<span id="L673" rel="#L673">673</span>
<span id="L674" rel="#L674">674</span>
<span id="L675" rel="#L675">675</span>
<span id="L676" rel="#L676">676</span>
<span id="L677" rel="#L677">677</span>
<span id="L678" rel="#L678">678</span>
<span id="L679" rel="#L679">679</span>
<span id="L680" rel="#L680">680</span>
<span id="L681" rel="#L681">681</span>
<span id="L682" rel="#L682">682</span>
<span id="L683" rel="#L683">683</span>
<span id="L684" rel="#L684">684</span>
<span id="L685" rel="#L685">685</span>
<span id="L686" rel="#L686">686</span>
<span id="L687" rel="#L687">687</span>
<span id="L688" rel="#L688">688</span>
<span id="L689" rel="#L689">689</span>
<span id="L690" rel="#L690">690</span>
<span id="L691" rel="#L691">691</span>
<span id="L692" rel="#L692">692</span>
<span id="L693" rel="#L693">693</span>
<span id="L694" rel="#L694">694</span>
<span id="L695" rel="#L695">695</span>
<span id="L696" rel="#L696">696</span>
<span id="L697" rel="#L697">697</span>
<span id="L698" rel="#L698">698</span>
<span id="L699" rel="#L699">699</span>
<span id="L700" rel="#L700">700</span>
<span id="L701" rel="#L701">701</span>
<span id="L702" rel="#L702">702</span>
<span id="L703" rel="#L703">703</span>
<span id="L704" rel="#L704">704</span>
<span id="L705" rel="#L705">705</span>
<span id="L706" rel="#L706">706</span>
<span id="L707" rel="#L707">707</span>
<span id="L708" rel="#L708">708</span>
<span id="L709" rel="#L709">709</span>
<span id="L710" rel="#L710">710</span>
<span id="L711" rel="#L711">711</span>
<span id="L712" rel="#L712">712</span>
<span id="L713" rel="#L713">713</span>
<span id="L714" rel="#L714">714</span>
<span id="L715" rel="#L715">715</span>
<span id="L716" rel="#L716">716</span>
<span id="L717" rel="#L717">717</span>
<span id="L718" rel="#L718">718</span>
<span id="L719" rel="#L719">719</span>
<span id="L720" rel="#L720">720</span>
<span id="L721" rel="#L721">721</span>
<span id="L722" rel="#L722">722</span>
<span id="L723" rel="#L723">723</span>
<span id="L724" rel="#L724">724</span>
<span id="L725" rel="#L725">725</span>
<span id="L726" rel="#L726">726</span>
<span id="L727" rel="#L727">727</span>
<span id="L728" rel="#L728">728</span>
<span id="L729" rel="#L729">729</span>
<span id="L730" rel="#L730">730</span>
<span id="L731" rel="#L731">731</span>
<span id="L732" rel="#L732">732</span>
<span id="L733" rel="#L733">733</span>
<span id="L734" rel="#L734">734</span>
<span id="L735" rel="#L735">735</span>
<span id="L736" rel="#L736">736</span>
<span id="L737" rel="#L737">737</span>
<span id="L738" rel="#L738">738</span>
<span id="L739" rel="#L739">739</span>
<span id="L740" rel="#L740">740</span>
<span id="L741" rel="#L741">741</span>
<span id="L742" rel="#L742">742</span>
<span id="L743" rel="#L743">743</span>
<span id="L744" rel="#L744">744</span>
<span id="L745" rel="#L745">745</span>
<span id="L746" rel="#L746">746</span>
<span id="L747" rel="#L747">747</span>
<span id="L748" rel="#L748">748</span>
<span id="L749" rel="#L749">749</span>
<span id="L750" rel="#L750">750</span>
<span id="L751" rel="#L751">751</span>
<span id="L752" rel="#L752">752</span>
<span id="L753" rel="#L753">753</span>
<span id="L754" rel="#L754">754</span>
<span id="L755" rel="#L755">755</span>
<span id="L756" rel="#L756">756</span>
<span id="L757" rel="#L757">757</span>
<span id="L758" rel="#L758">758</span>
<span id="L759" rel="#L759">759</span>
<span id="L760" rel="#L760">760</span>
<span id="L761" rel="#L761">761</span>
<span id="L762" rel="#L762">762</span>
<span id="L763" rel="#L763">763</span>
<span id="L764" rel="#L764">764</span>
<span id="L765" rel="#L765">765</span>
<span id="L766" rel="#L766">766</span>
<span id="L767" rel="#L767">767</span>
<span id="L768" rel="#L768">768</span>
<span id="L769" rel="#L769">769</span>
<span id="L770" rel="#L770">770</span>
<span id="L771" rel="#L771">771</span>
<span id="L772" rel="#L772">772</span>
<span id="L773" rel="#L773">773</span>
<span id="L774" rel="#L774">774</span>
<span id="L775" rel="#L775">775</span>
<span id="L776" rel="#L776">776</span>
<span id="L777" rel="#L777">777</span>
<span id="L778" rel="#L778">778</span>
<span id="L779" rel="#L779">779</span>
<span id="L780" rel="#L780">780</span>
<span id="L781" rel="#L781">781</span>
<span id="L782" rel="#L782">782</span>
<span id="L783" rel="#L783">783</span>
<span id="L784" rel="#L784">784</span>
<span id="L785" rel="#L785">785</span>
<span id="L786" rel="#L786">786</span>
<span id="L787" rel="#L787">787</span>
<span id="L788" rel="#L788">788</span>
<span id="L789" rel="#L789">789</span>
<span id="L790" rel="#L790">790</span>
<span id="L791" rel="#L791">791</span>
<span id="L792" rel="#L792">792</span>
<span id="L793" rel="#L793">793</span>
<span id="L794" rel="#L794">794</span>
<span id="L795" rel="#L795">795</span>
<span id="L796" rel="#L796">796</span>
<span id="L797" rel="#L797">797</span>
<span id="L798" rel="#L798">798</span>
<span id="L799" rel="#L799">799</span>
<span id="L800" rel="#L800">800</span>
<span id="L801" rel="#L801">801</span>
<span id="L802" rel="#L802">802</span>
<span id="L803" rel="#L803">803</span>
<span id="L804" rel="#L804">804</span>
<span id="L805" rel="#L805">805</span>
<span id="L806" rel="#L806">806</span>
<span id="L807" rel="#L807">807</span>
<span id="L808" rel="#L808">808</span>
<span id="L809" rel="#L809">809</span>
<span id="L810" rel="#L810">810</span>
<span id="L811" rel="#L811">811</span>
<span id="L812" rel="#L812">812</span>
<span id="L813" rel="#L813">813</span>
<span id="L814" rel="#L814">814</span>
<span id="L815" rel="#L815">815</span>
<span id="L816" rel="#L816">816</span>
<span id="L817" rel="#L817">817</span>
<span id="L818" rel="#L818">818</span>
<span id="L819" rel="#L819">819</span>
<span id="L820" rel="#L820">820</span>
<span id="L821" rel="#L821">821</span>
<span id="L822" rel="#L822">822</span>
<span id="L823" rel="#L823">823</span>
<span id="L824" rel="#L824">824</span>
<span id="L825" rel="#L825">825</span>
<span id="L826" rel="#L826">826</span>
<span id="L827" rel="#L827">827</span>
<span id="L828" rel="#L828">828</span>
<span id="L829" rel="#L829">829</span>
<span id="L830" rel="#L830">830</span>
<span id="L831" rel="#L831">831</span>
<span id="L832" rel="#L832">832</span>
<span id="L833" rel="#L833">833</span>
<span id="L834" rel="#L834">834</span>
<span id="L835" rel="#L835">835</span>
<span id="L836" rel="#L836">836</span>
<span id="L837" rel="#L837">837</span>
<span id="L838" rel="#L838">838</span>
<span id="L839" rel="#L839">839</span>
<span id="L840" rel="#L840">840</span>
<span id="L841" rel="#L841">841</span>
<span id="L842" rel="#L842">842</span>
<span id="L843" rel="#L843">843</span>
<span id="L844" rel="#L844">844</span>
<span id="L845" rel="#L845">845</span>
<span id="L846" rel="#L846">846</span>
<span id="L847" rel="#L847">847</span>
<span id="L848" rel="#L848">848</span>
<span id="L849" rel="#L849">849</span>
<span id="L850" rel="#L850">850</span>
<span id="L851" rel="#L851">851</span>
<span id="L852" rel="#L852">852</span>
<span id="L853" rel="#L853">853</span>
<span id="L854" rel="#L854">854</span>
<span id="L855" rel="#L855">855</span>
<span id="L856" rel="#L856">856</span>
<span id="L857" rel="#L857">857</span>
<span id="L858" rel="#L858">858</span>
<span id="L859" rel="#L859">859</span>
<span id="L860" rel="#L860">860</span>
<span id="L861" rel="#L861">861</span>
<span id="L862" rel="#L862">862</span>
<span id="L863" rel="#L863">863</span>
<span id="L864" rel="#L864">864</span>
<span id="L865" rel="#L865">865</span>
<span id="L866" rel="#L866">866</span>
<span id="L867" rel="#L867">867</span>
<span id="L868" rel="#L868">868</span>
<span id="L869" rel="#L869">869</span>
<span id="L870" rel="#L870">870</span>
<span id="L871" rel="#L871">871</span>
<span id="L872" rel="#L872">872</span>
<span id="L873" rel="#L873">873</span>
<span id="L874" rel="#L874">874</span>
<span id="L875" rel="#L875">875</span>
<span id="L876" rel="#L876">876</span>
<span id="L877" rel="#L877">877</span>
<span id="L878" rel="#L878">878</span>
<span id="L879" rel="#L879">879</span>
<span id="L880" rel="#L880">880</span>
<span id="L881" rel="#L881">881</span>
<span id="L882" rel="#L882">882</span>
<span id="L883" rel="#L883">883</span>
<span id="L884" rel="#L884">884</span>
<span id="L885" rel="#L885">885</span>
<span id="L886" rel="#L886">886</span>
<span id="L887" rel="#L887">887</span>
<span id="L888" rel="#L888">888</span>
<span id="L889" rel="#L889">889</span>
<span id="L890" rel="#L890">890</span>
<span id="L891" rel="#L891">891</span>
<span id="L892" rel="#L892">892</span>
<span id="L893" rel="#L893">893</span>
<span id="L894" rel="#L894">894</span>
<span id="L895" rel="#L895">895</span>
<span id="L896" rel="#L896">896</span>
<span id="L897" rel="#L897">897</span>
<span id="L898" rel="#L898">898</span>
<span id="L899" rel="#L899">899</span>
<span id="L900" rel="#L900">900</span>
<span id="L901" rel="#L901">901</span>
<span id="L902" rel="#L902">902</span>
<span id="L903" rel="#L903">903</span>
<span id="L904" rel="#L904">904</span>
<span id="L905" rel="#L905">905</span>
<span id="L906" rel="#L906">906</span>
<span id="L907" rel="#L907">907</span>
<span id="L908" rel="#L908">908</span>
<span id="L909" rel="#L909">909</span>
<span id="L910" rel="#L910">910</span>
<span id="L911" rel="#L911">911</span>
<span id="L912" rel="#L912">912</span>
<span id="L913" rel="#L913">913</span>
<span id="L914" rel="#L914">914</span>
<span id="L915" rel="#L915">915</span>
<span id="L916" rel="#L916">916</span>
<span id="L917" rel="#L917">917</span>
<span id="L918" rel="#L918">918</span>
<span id="L919" rel="#L919">919</span>
<span id="L920" rel="#L920">920</span>
<span id="L921" rel="#L921">921</span>
<span id="L922" rel="#L922">922</span>
<span id="L923" rel="#L923">923</span>
<span id="L924" rel="#L924">924</span>
<span id="L925" rel="#L925">925</span>
<span id="L926" rel="#L926">926</span>
<span id="L927" rel="#L927">927</span>
<span id="L928" rel="#L928">928</span>
<span id="L929" rel="#L929">929</span>
<span id="L930" rel="#L930">930</span>
<span id="L931" rel="#L931">931</span>
<span id="L932" rel="#L932">932</span>
<span id="L933" rel="#L933">933</span>
<span id="L934" rel="#L934">934</span>
<span id="L935" rel="#L935">935</span>
<span id="L936" rel="#L936">936</span>
<span id="L937" rel="#L937">937</span>
<span id="L938" rel="#L938">938</span>
<span id="L939" rel="#L939">939</span>
<span id="L940" rel="#L940">940</span>
<span id="L941" rel="#L941">941</span>
<span id="L942" rel="#L942">942</span>
<span id="L943" rel="#L943">943</span>
<span id="L944" rel="#L944">944</span>
<span id="L945" rel="#L945">945</span>
<span id="L946" rel="#L946">946</span>
<span id="L947" rel="#L947">947</span>
<span id="L948" rel="#L948">948</span>
<span id="L949" rel="#L949">949</span>
<span id="L950" rel="#L950">950</span>
<span id="L951" rel="#L951">951</span>
<span id="L952" rel="#L952">952</span>
<span id="L953" rel="#L953">953</span>
<span id="L954" rel="#L954">954</span>
<span id="L955" rel="#L955">955</span>
<span id="L956" rel="#L956">956</span>
<span id="L957" rel="#L957">957</span>
<span id="L958" rel="#L958">958</span>
<span id="L959" rel="#L959">959</span>
<span id="L960" rel="#L960">960</span>
<span id="L961" rel="#L961">961</span>
<span id="L962" rel="#L962">962</span>
<span id="L963" rel="#L963">963</span>
<span id="L964" rel="#L964">964</span>
<span id="L965" rel="#L965">965</span>
<span id="L966" rel="#L966">966</span>
<span id="L967" rel="#L967">967</span>
<span id="L968" rel="#L968">968</span>
<span id="L969" rel="#L969">969</span>
<span id="L970" rel="#L970">970</span>
<span id="L971" rel="#L971">971</span>
<span id="L972" rel="#L972">972</span>
<span id="L973" rel="#L973">973</span>
<span id="L974" rel="#L974">974</span>
<span id="L975" rel="#L975">975</span>
<span id="L976" rel="#L976">976</span>
<span id="L977" rel="#L977">977</span>
<span id="L978" rel="#L978">978</span>
<span id="L979" rel="#L979">979</span>
<span id="L980" rel="#L980">980</span>
<span id="L981" rel="#L981">981</span>
<span id="L982" rel="#L982">982</span>
<span id="L983" rel="#L983">983</span>
<span id="L984" rel="#L984">984</span>
<span id="L985" rel="#L985">985</span>
<span id="L986" rel="#L986">986</span>
<span id="L987" rel="#L987">987</span>
<span id="L988" rel="#L988">988</span>
<span id="L989" rel="#L989">989</span>
<span id="L990" rel="#L990">990</span>
<span id="L991" rel="#L991">991</span>
<span id="L992" rel="#L992">992</span>
<span id="L993" rel="#L993">993</span>
<span id="L994" rel="#L994">994</span>
<span id="L995" rel="#L995">995</span>
<span id="L996" rel="#L996">996</span>
<span id="L997" rel="#L997">997</span>
<span id="L998" rel="#L998">998</span>
<span id="L999" rel="#L999">999</span>
<span id="L1000" rel="#L1000">1000</span>
<span id="L1001" rel="#L1001">1001</span>
<span id="L1002" rel="#L1002">1002</span>
<span id="L1003" rel="#L1003">1003</span>
<span id="L1004" rel="#L1004">1004</span>
<span id="L1005" rel="#L1005">1005</span>
<span id="L1006" rel="#L1006">1006</span>
<span id="L1007" rel="#L1007">1007</span>
<span id="L1008" rel="#L1008">1008</span>
<span id="L1009" rel="#L1009">1009</span>
<span id="L1010" rel="#L1010">1010</span>
<span id="L1011" rel="#L1011">1011</span>
<span id="L1012" rel="#L1012">1012</span>
<span id="L1013" rel="#L1013">1013</span>
<span id="L1014" rel="#L1014">1014</span>
<span id="L1015" rel="#L1015">1015</span>
<span id="L1016" rel="#L1016">1016</span>
<span id="L1017" rel="#L1017">1017</span>
<span id="L1018" rel="#L1018">1018</span>
<span id="L1019" rel="#L1019">1019</span>
<span id="L1020" rel="#L1020">1020</span>
<span id="L1021" rel="#L1021">1021</span>
<span id="L1022" rel="#L1022">1022</span>
<span id="L1023" rel="#L1023">1023</span>
<span id="L1024" rel="#L1024">1024</span>
<span id="L1025" rel="#L1025">1025</span>
<span id="L1026" rel="#L1026">1026</span>
<span id="L1027" rel="#L1027">1027</span>
<span id="L1028" rel="#L1028">1028</span>
<span id="L1029" rel="#L1029">1029</span>
<span id="L1030" rel="#L1030">1030</span>
<span id="L1031" rel="#L1031">1031</span>
<span id="L1032" rel="#L1032">1032</span>
<span id="L1033" rel="#L1033">1033</span>
<span id="L1034" rel="#L1034">1034</span>
<span id="L1035" rel="#L1035">1035</span>
<span id="L1036" rel="#L1036">1036</span>
<span id="L1037" rel="#L1037">1037</span>
<span id="L1038" rel="#L1038">1038</span>
<span id="L1039" rel="#L1039">1039</span>
<span id="L1040" rel="#L1040">1040</span>
<span id="L1041" rel="#L1041">1041</span>
<span id="L1042" rel="#L1042">1042</span>
<span id="L1043" rel="#L1043">1043</span>
<span id="L1044" rel="#L1044">1044</span>
<span id="L1045" rel="#L1045">1045</span>
<span id="L1046" rel="#L1046">1046</span>
<span id="L1047" rel="#L1047">1047</span>
<span id="L1048" rel="#L1048">1048</span>
<span id="L1049" rel="#L1049">1049</span>
<span id="L1050" rel="#L1050">1050</span>
<span id="L1051" rel="#L1051">1051</span>
<span id="L1052" rel="#L1052">1052</span>
<span id="L1053" rel="#L1053">1053</span>
<span id="L1054" rel="#L1054">1054</span>
<span id="L1055" rel="#L1055">1055</span>
<span id="L1056" rel="#L1056">1056</span>
<span id="L1057" rel="#L1057">1057</span>
<span id="L1058" rel="#L1058">1058</span>
<span id="L1059" rel="#L1059">1059</span>
<span id="L1060" rel="#L1060">1060</span>
<span id="L1061" rel="#L1061">1061</span>
<span id="L1062" rel="#L1062">1062</span>
<span id="L1063" rel="#L1063">1063</span>
<span id="L1064" rel="#L1064">1064</span>
<span id="L1065" rel="#L1065">1065</span>
<span id="L1066" rel="#L1066">1066</span>
<span id="L1067" rel="#L1067">1067</span>
<span id="L1068" rel="#L1068">1068</span>
<span id="L1069" rel="#L1069">1069</span>
<span id="L1070" rel="#L1070">1070</span>
<span id="L1071" rel="#L1071">1071</span>
<span id="L1072" rel="#L1072">1072</span>
<span id="L1073" rel="#L1073">1073</span>
<span id="L1074" rel="#L1074">1074</span>
<span id="L1075" rel="#L1075">1075</span>
<span id="L1076" rel="#L1076">1076</span>
<span id="L1077" rel="#L1077">1077</span>
<span id="L1078" rel="#L1078">1078</span>
<span id="L1079" rel="#L1079">1079</span>
<span id="L1080" rel="#L1080">1080</span>
<span id="L1081" rel="#L1081">1081</span>
<span id="L1082" rel="#L1082">1082</span>
<span id="L1083" rel="#L1083">1083</span>
<span id="L1084" rel="#L1084">1084</span>
<span id="L1085" rel="#L1085">1085</span>
<span id="L1086" rel="#L1086">1086</span>
<span id="L1087" rel="#L1087">1087</span>
<span id="L1088" rel="#L1088">1088</span>
<span id="L1089" rel="#L1089">1089</span>
<span id="L1090" rel="#L1090">1090</span>
<span id="L1091" rel="#L1091">1091</span>
<span id="L1092" rel="#L1092">1092</span>
<span id="L1093" rel="#L1093">1093</span>
<span id="L1094" rel="#L1094">1094</span>
<span id="L1095" rel="#L1095">1095</span>
<span id="L1096" rel="#L1096">1096</span>
<span id="L1097" rel="#L1097">1097</span>
<span id="L1098" rel="#L1098">1098</span>
<span id="L1099" rel="#L1099">1099</span>
<span id="L1100" rel="#L1100">1100</span>
<span id="L1101" rel="#L1101">1101</span>
<span id="L1102" rel="#L1102">1102</span>
<span id="L1103" rel="#L1103">1103</span>
<span id="L1104" rel="#L1104">1104</span>
<span id="L1105" rel="#L1105">1105</span>
<span id="L1106" rel="#L1106">1106</span>
<span id="L1107" rel="#L1107">1107</span>
<span id="L1108" rel="#L1108">1108</span>
<span id="L1109" rel="#L1109">1109</span>
<span id="L1110" rel="#L1110">1110</span>
<span id="L1111" rel="#L1111">1111</span>
<span id="L1112" rel="#L1112">1112</span>
<span id="L1113" rel="#L1113">1113</span>
<span id="L1114" rel="#L1114">1114</span>
<span id="L1115" rel="#L1115">1115</span>
<span id="L1116" rel="#L1116">1116</span>
<span id="L1117" rel="#L1117">1117</span>
<span id="L1118" rel="#L1118">1118</span>
<span id="L1119" rel="#L1119">1119</span>
<span id="L1120" rel="#L1120">1120</span>
<span id="L1121" rel="#L1121">1121</span>
<span id="L1122" rel="#L1122">1122</span>
<span id="L1123" rel="#L1123">1123</span>
<span id="L1124" rel="#L1124">1124</span>
<span id="L1125" rel="#L1125">1125</span>
<span id="L1126" rel="#L1126">1126</span>
<span id="L1127" rel="#L1127">1127</span>
<span id="L1128" rel="#L1128">1128</span>
<span id="L1129" rel="#L1129">1129</span>
<span id="L1130" rel="#L1130">1130</span>
<span id="L1131" rel="#L1131">1131</span>
<span id="L1132" rel="#L1132">1132</span>
<span id="L1133" rel="#L1133">1133</span>
<span id="L1134" rel="#L1134">1134</span>
<span id="L1135" rel="#L1135">1135</span>
<span id="L1136" rel="#L1136">1136</span>
<span id="L1137" rel="#L1137">1137</span>
<span id="L1138" rel="#L1138">1138</span>
<span id="L1139" rel="#L1139">1139</span>
<span id="L1140" rel="#L1140">1140</span>
<span id="L1141" rel="#L1141">1141</span>
<span id="L1142" rel="#L1142">1142</span>
<span id="L1143" rel="#L1143">1143</span>
<span id="L1144" rel="#L1144">1144</span>
<span id="L1145" rel="#L1145">1145</span>
<span id="L1146" rel="#L1146">1146</span>
<span id="L1147" rel="#L1147">1147</span>
<span id="L1148" rel="#L1148">1148</span>
<span id="L1149" rel="#L1149">1149</span>
<span id="L1150" rel="#L1150">1150</span>
<span id="L1151" rel="#L1151">1151</span>
<span id="L1152" rel="#L1152">1152</span>
<span id="L1153" rel="#L1153">1153</span>
<span id="L1154" rel="#L1154">1154</span>
<span id="L1155" rel="#L1155">1155</span>
<span id="L1156" rel="#L1156">1156</span>
<span id="L1157" rel="#L1157">1157</span>
<span id="L1158" rel="#L1158">1158</span>
<span id="L1159" rel="#L1159">1159</span>
<span id="L1160" rel="#L1160">1160</span>
<span id="L1161" rel="#L1161">1161</span>
<span id="L1162" rel="#L1162">1162</span>
<span id="L1163" rel="#L1163">1163</span>
<span id="L1164" rel="#L1164">1164</span>
<span id="L1165" rel="#L1165">1165</span>
<span id="L1166" rel="#L1166">1166</span>
<span id="L1167" rel="#L1167">1167</span>
<span id="L1168" rel="#L1168">1168</span>
<span id="L1169" rel="#L1169">1169</span>
<span id="L1170" rel="#L1170">1170</span>
<span id="L1171" rel="#L1171">1171</span>
<span id="L1172" rel="#L1172">1172</span>
<span id="L1173" rel="#L1173">1173</span>
<span id="L1174" rel="#L1174">1174</span>
<span id="L1175" rel="#L1175">1175</span>
<span id="L1176" rel="#L1176">1176</span>
<span id="L1177" rel="#L1177">1177</span>
<span id="L1178" rel="#L1178">1178</span>
<span id="L1179" rel="#L1179">1179</span>
<span id="L1180" rel="#L1180">1180</span>
<span id="L1181" rel="#L1181">1181</span>
<span id="L1182" rel="#L1182">1182</span>
<span id="L1183" rel="#L1183">1183</span>
<span id="L1184" rel="#L1184">1184</span>
<span id="L1185" rel="#L1185">1185</span>
<span id="L1186" rel="#L1186">1186</span>
<span id="L1187" rel="#L1187">1187</span>
<span id="L1188" rel="#L1188">1188</span>
<span id="L1189" rel="#L1189">1189</span>
<span id="L1190" rel="#L1190">1190</span>
<span id="L1191" rel="#L1191">1191</span>
<span id="L1192" rel="#L1192">1192</span>
<span id="L1193" rel="#L1193">1193</span>
<span id="L1194" rel="#L1194">1194</span>
<span id="L1195" rel="#L1195">1195</span>
<span id="L1196" rel="#L1196">1196</span>
<span id="L1197" rel="#L1197">1197</span>
<span id="L1198" rel="#L1198">1198</span>
<span id="L1199" rel="#L1199">1199</span>
<span id="L1200" rel="#L1200">1200</span>
<span id="L1201" rel="#L1201">1201</span>
<span id="L1202" rel="#L1202">1202</span>
<span id="L1203" rel="#L1203">1203</span>
<span id="L1204" rel="#L1204">1204</span>
<span id="L1205" rel="#L1205">1205</span>
<span id="L1206" rel="#L1206">1206</span>
<span id="L1207" rel="#L1207">1207</span>
<span id="L1208" rel="#L1208">1208</span>
<span id="L1209" rel="#L1209">1209</span>
<span id="L1210" rel="#L1210">1210</span>
<span id="L1211" rel="#L1211">1211</span>
<span id="L1212" rel="#L1212">1212</span>
<span id="L1213" rel="#L1213">1213</span>
<span id="L1214" rel="#L1214">1214</span>
<span id="L1215" rel="#L1215">1215</span>
<span id="L1216" rel="#L1216">1216</span>
<span id="L1217" rel="#L1217">1217</span>
<span id="L1218" rel="#L1218">1218</span>
<span id="L1219" rel="#L1219">1219</span>
<span id="L1220" rel="#L1220">1220</span>
<span id="L1221" rel="#L1221">1221</span>
<span id="L1222" rel="#L1222">1222</span>
<span id="L1223" rel="#L1223">1223</span>
<span id="L1224" rel="#L1224">1224</span>
<span id="L1225" rel="#L1225">1225</span>
<span id="L1226" rel="#L1226">1226</span>
<span id="L1227" rel="#L1227">1227</span>
<span id="L1228" rel="#L1228">1228</span>
<span id="L1229" rel="#L1229">1229</span>
<span id="L1230" rel="#L1230">1230</span>
<span id="L1231" rel="#L1231">1231</span>
<span id="L1232" rel="#L1232">1232</span>
<span id="L1233" rel="#L1233">1233</span>
<span id="L1234" rel="#L1234">1234</span>
<span id="L1235" rel="#L1235">1235</span>
<span id="L1236" rel="#L1236">1236</span>
<span id="L1237" rel="#L1237">1237</span>
<span id="L1238" rel="#L1238">1238</span>
<span id="L1239" rel="#L1239">1239</span>
<span id="L1240" rel="#L1240">1240</span>
<span id="L1241" rel="#L1241">1241</span>
<span id="L1242" rel="#L1242">1242</span>
<span id="L1243" rel="#L1243">1243</span>
<span id="L1244" rel="#L1244">1244</span>
<span id="L1245" rel="#L1245">1245</span>
<span id="L1246" rel="#L1246">1246</span>
<span id="L1247" rel="#L1247">1247</span>
<span id="L1248" rel="#L1248">1248</span>
<span id="L1249" rel="#L1249">1249</span>
<span id="L1250" rel="#L1250">1250</span>
<span id="L1251" rel="#L1251">1251</span>
<span id="L1252" rel="#L1252">1252</span>
<span id="L1253" rel="#L1253">1253</span>
<span id="L1254" rel="#L1254">1254</span>
<span id="L1255" rel="#L1255">1255</span>
<span id="L1256" rel="#L1256">1256</span>
<span id="L1257" rel="#L1257">1257</span>
<span id="L1258" rel="#L1258">1258</span>
<span id="L1259" rel="#L1259">1259</span>
<span id="L1260" rel="#L1260">1260</span>
<span id="L1261" rel="#L1261">1261</span>
<span id="L1262" rel="#L1262">1262</span>
<span id="L1263" rel="#L1263">1263</span>
<span id="L1264" rel="#L1264">1264</span>
<span id="L1265" rel="#L1265">1265</span>
<span id="L1266" rel="#L1266">1266</span>
<span id="L1267" rel="#L1267">1267</span>
<span id="L1268" rel="#L1268">1268</span>
<span id="L1269" rel="#L1269">1269</span>
<span id="L1270" rel="#L1270">1270</span>
<span id="L1271" rel="#L1271">1271</span>
<span id="L1272" rel="#L1272">1272</span>
<span id="L1273" rel="#L1273">1273</span>
<span id="L1274" rel="#L1274">1274</span>
<span id="L1275" rel="#L1275">1275</span>
<span id="L1276" rel="#L1276">1276</span>
<span id="L1277" rel="#L1277">1277</span>
<span id="L1278" rel="#L1278">1278</span>
<span id="L1279" rel="#L1279">1279</span>
<span id="L1280" rel="#L1280">1280</span>
<span id="L1281" rel="#L1281">1281</span>
<span id="L1282" rel="#L1282">1282</span>
<span id="L1283" rel="#L1283">1283</span>
<span id="L1284" rel="#L1284">1284</span>
<span id="L1285" rel="#L1285">1285</span>
<span id="L1286" rel="#L1286">1286</span>
<span id="L1287" rel="#L1287">1287</span>
<span id="L1288" rel="#L1288">1288</span>
<span id="L1289" rel="#L1289">1289</span>
<span id="L1290" rel="#L1290">1290</span>
<span id="L1291" rel="#L1291">1291</span>
<span id="L1292" rel="#L1292">1292</span>
<span id="L1293" rel="#L1293">1293</span>
<span id="L1294" rel="#L1294">1294</span>
<span id="L1295" rel="#L1295">1295</span>
<span id="L1296" rel="#L1296">1296</span>
<span id="L1297" rel="#L1297">1297</span>
<span id="L1298" rel="#L1298">1298</span>
<span id="L1299" rel="#L1299">1299</span>
<span id="L1300" rel="#L1300">1300</span>
<span id="L1301" rel="#L1301">1301</span>
<span id="L1302" rel="#L1302">1302</span>
<span id="L1303" rel="#L1303">1303</span>
<span id="L1304" rel="#L1304">1304</span>
<span id="L1305" rel="#L1305">1305</span>
<span id="L1306" rel="#L1306">1306</span>
<span id="L1307" rel="#L1307">1307</span>
<span id="L1308" rel="#L1308">1308</span>
<span id="L1309" rel="#L1309">1309</span>
<span id="L1310" rel="#L1310">1310</span>
<span id="L1311" rel="#L1311">1311</span>
<span id="L1312" rel="#L1312">1312</span>
<span id="L1313" rel="#L1313">1313</span>
<span id="L1314" rel="#L1314">1314</span>
<span id="L1315" rel="#L1315">1315</span>
<span id="L1316" rel="#L1316">1316</span>
<span id="L1317" rel="#L1317">1317</span>
<span id="L1318" rel="#L1318">1318</span>
<span id="L1319" rel="#L1319">1319</span>
<span id="L1320" rel="#L1320">1320</span>
<span id="L1321" rel="#L1321">1321</span>
<span id="L1322" rel="#L1322">1322</span>
<span id="L1323" rel="#L1323">1323</span>
<span id="L1324" rel="#L1324">1324</span>
<span id="L1325" rel="#L1325">1325</span>
<span id="L1326" rel="#L1326">1326</span>
<span id="L1327" rel="#L1327">1327</span>
<span id="L1328" rel="#L1328">1328</span>
<span id="L1329" rel="#L1329">1329</span>
<span id="L1330" rel="#L1330">1330</span>
<span id="L1331" rel="#L1331">1331</span>
<span id="L1332" rel="#L1332">1332</span>
<span id="L1333" rel="#L1333">1333</span>
<span id="L1334" rel="#L1334">1334</span>
<span id="L1335" rel="#L1335">1335</span>
<span id="L1336" rel="#L1336">1336</span>
<span id="L1337" rel="#L1337">1337</span>
<span id="L1338" rel="#L1338">1338</span>
<span id="L1339" rel="#L1339">1339</span>
<span id="L1340" rel="#L1340">1340</span>
<span id="L1341" rel="#L1341">1341</span>
<span id="L1342" rel="#L1342">1342</span>
<span id="L1343" rel="#L1343">1343</span>
<span id="L1344" rel="#L1344">1344</span>
<span id="L1345" rel="#L1345">1345</span>
<span id="L1346" rel="#L1346">1346</span>
<span id="L1347" rel="#L1347">1347</span>
<span id="L1348" rel="#L1348">1348</span>
<span id="L1349" rel="#L1349">1349</span>
<span id="L1350" rel="#L1350">1350</span>
<span id="L1351" rel="#L1351">1351</span>
<span id="L1352" rel="#L1352">1352</span>
<span id="L1353" rel="#L1353">1353</span>
<span id="L1354" rel="#L1354">1354</span>
<span id="L1355" rel="#L1355">1355</span>
<span id="L1356" rel="#L1356">1356</span>
<span id="L1357" rel="#L1357">1357</span>
<span id="L1358" rel="#L1358">1358</span>
<span id="L1359" rel="#L1359">1359</span>
<span id="L1360" rel="#L1360">1360</span>
<span id="L1361" rel="#L1361">1361</span>
<span id="L1362" rel="#L1362">1362</span>
<span id="L1363" rel="#L1363">1363</span>
<span id="L1364" rel="#L1364">1364</span>
<span id="L1365" rel="#L1365">1365</span>
<span id="L1366" rel="#L1366">1366</span>
<span id="L1367" rel="#L1367">1367</span>
<span id="L1368" rel="#L1368">1368</span>
<span id="L1369" rel="#L1369">1369</span>
<span id="L1370" rel="#L1370">1370</span>
<span id="L1371" rel="#L1371">1371</span>
<span id="L1372" rel="#L1372">1372</span>
<span id="L1373" rel="#L1373">1373</span>
<span id="L1374" rel="#L1374">1374</span>
<span id="L1375" rel="#L1375">1375</span>
<span id="L1376" rel="#L1376">1376</span>
<span id="L1377" rel="#L1377">1377</span>
<span id="L1378" rel="#L1378">1378</span>
<span id="L1379" rel="#L1379">1379</span>
<span id="L1380" rel="#L1380">1380</span>
<span id="L1381" rel="#L1381">1381</span>
<span id="L1382" rel="#L1382">1382</span>
<span id="L1383" rel="#L1383">1383</span>
<span id="L1384" rel="#L1384">1384</span>
<span id="L1385" rel="#L1385">1385</span>
<span id="L1386" rel="#L1386">1386</span>
<span id="L1387" rel="#L1387">1387</span>
<span id="L1388" rel="#L1388">1388</span>
<span id="L1389" rel="#L1389">1389</span>
<span id="L1390" rel="#L1390">1390</span>
<span id="L1391" rel="#L1391">1391</span>
<span id="L1392" rel="#L1392">1392</span>
<span id="L1393" rel="#L1393">1393</span>
<span id="L1394" rel="#L1394">1394</span>
<span id="L1395" rel="#L1395">1395</span>
<span id="L1396" rel="#L1396">1396</span>
<span id="L1397" rel="#L1397">1397</span>
<span id="L1398" rel="#L1398">1398</span>
<span id="L1399" rel="#L1399">1399</span>
<span id="L1400" rel="#L1400">1400</span>
<span id="L1401" rel="#L1401">1401</span>
<span id="L1402" rel="#L1402">1402</span>
<span id="L1403" rel="#L1403">1403</span>
<span id="L1404" rel="#L1404">1404</span>
<span id="L1405" rel="#L1405">1405</span>
<span id="L1406" rel="#L1406">1406</span>
<span id="L1407" rel="#L1407">1407</span>
<span id="L1408" rel="#L1408">1408</span>
<span id="L1409" rel="#L1409">1409</span>
<span id="L1410" rel="#L1410">1410</span>
<span id="L1411" rel="#L1411">1411</span>
<span id="L1412" rel="#L1412">1412</span>
<span id="L1413" rel="#L1413">1413</span>
<span id="L1414" rel="#L1414">1414</span>
<span id="L1415" rel="#L1415">1415</span>
<span id="L1416" rel="#L1416">1416</span>
<span id="L1417" rel="#L1417">1417</span>
<span id="L1418" rel="#L1418">1418</span>
<span id="L1419" rel="#L1419">1419</span>
<span id="L1420" rel="#L1420">1420</span>
<span id="L1421" rel="#L1421">1421</span>
<span id="L1422" rel="#L1422">1422</span>
<span id="L1423" rel="#L1423">1423</span>
<span id="L1424" rel="#L1424">1424</span>
<span id="L1425" rel="#L1425">1425</span>
<span id="L1426" rel="#L1426">1426</span>
<span id="L1427" rel="#L1427">1427</span>
<span id="L1428" rel="#L1428">1428</span>
<span id="L1429" rel="#L1429">1429</span>
<span id="L1430" rel="#L1430">1430</span>
<span id="L1431" rel="#L1431">1431</span>
<span id="L1432" rel="#L1432">1432</span>
<span id="L1433" rel="#L1433">1433</span>
<span id="L1434" rel="#L1434">1434</span>
<span id="L1435" rel="#L1435">1435</span>
<span id="L1436" rel="#L1436">1436</span>
<span id="L1437" rel="#L1437">1437</span>
<span id="L1438" rel="#L1438">1438</span>
<span id="L1439" rel="#L1439">1439</span>
<span id="L1440" rel="#L1440">1440</span>
<span id="L1441" rel="#L1441">1441</span>
<span id="L1442" rel="#L1442">1442</span>
<span id="L1443" rel="#L1443">1443</span>
<span id="L1444" rel="#L1444">1444</span>
<span id="L1445" rel="#L1445">1445</span>
<span id="L1446" rel="#L1446">1446</span>
<span id="L1447" rel="#L1447">1447</span>
<span id="L1448" rel="#L1448">1448</span>
<span id="L1449" rel="#L1449">1449</span>
<span id="L1450" rel="#L1450">1450</span>
<span id="L1451" rel="#L1451">1451</span>
<span id="L1452" rel="#L1452">1452</span>
<span id="L1453" rel="#L1453">1453</span>
<span id="L1454" rel="#L1454">1454</span>
<span id="L1455" rel="#L1455">1455</span>
<span id="L1456" rel="#L1456">1456</span>
<span id="L1457" rel="#L1457">1457</span>
<span id="L1458" rel="#L1458">1458</span>
<span id="L1459" rel="#L1459">1459</span>
<span id="L1460" rel="#L1460">1460</span>
<span id="L1461" rel="#L1461">1461</span>
<span id="L1462" rel="#L1462">1462</span>
<span id="L1463" rel="#L1463">1463</span>
<span id="L1464" rel="#L1464">1464</span>
<span id="L1465" rel="#L1465">1465</span>
<span id="L1466" rel="#L1466">1466</span>
<span id="L1467" rel="#L1467">1467</span>
<span id="L1468" rel="#L1468">1468</span>
<span id="L1469" rel="#L1469">1469</span>
<span id="L1470" rel="#L1470">1470</span>
<span id="L1471" rel="#L1471">1471</span>
<span id="L1472" rel="#L1472">1472</span>
<span id="L1473" rel="#L1473">1473</span>
<span id="L1474" rel="#L1474">1474</span>
<span id="L1475" rel="#L1475">1475</span>
<span id="L1476" rel="#L1476">1476</span>
<span id="L1477" rel="#L1477">1477</span>
<span id="L1478" rel="#L1478">1478</span>
<span id="L1479" rel="#L1479">1479</span>
<span id="L1480" rel="#L1480">1480</span>
<span id="L1481" rel="#L1481">1481</span>
<span id="L1482" rel="#L1482">1482</span>
<span id="L1483" rel="#L1483">1483</span>
<span id="L1484" rel="#L1484">1484</span>
<span id="L1485" rel="#L1485">1485</span>
<span id="L1486" rel="#L1486">1486</span>
<span id="L1487" rel="#L1487">1487</span>
<span id="L1488" rel="#L1488">1488</span>
<span id="L1489" rel="#L1489">1489</span>
<span id="L1490" rel="#L1490">1490</span>
<span id="L1491" rel="#L1491">1491</span>
<span id="L1492" rel="#L1492">1492</span>
<span id="L1493" rel="#L1493">1493</span>
<span id="L1494" rel="#L1494">1494</span>
<span id="L1495" rel="#L1495">1495</span>
<span id="L1496" rel="#L1496">1496</span>
<span id="L1497" rel="#L1497">1497</span>
<span id="L1498" rel="#L1498">1498</span>
<span id="L1499" rel="#L1499">1499</span>
<span id="L1500" rel="#L1500">1500</span>
<span id="L1501" rel="#L1501">1501</span>
<span id="L1502" rel="#L1502">1502</span>
<span id="L1503" rel="#L1503">1503</span>
<span id="L1504" rel="#L1504">1504</span>
<span id="L1505" rel="#L1505">1505</span>
<span id="L1506" rel="#L1506">1506</span>
<span id="L1507" rel="#L1507">1507</span>
<span id="L1508" rel="#L1508">1508</span>
<span id="L1509" rel="#L1509">1509</span>
<span id="L1510" rel="#L1510">1510</span>
<span id="L1511" rel="#L1511">1511</span>
<span id="L1512" rel="#L1512">1512</span>
<span id="L1513" rel="#L1513">1513</span>
<span id="L1514" rel="#L1514">1514</span>

           </td>
           <td class="blob-line-code"><div class="code-body highlight"><pre><div class='line' id='LC1'>********************************</div><div class='line' id='LC2'>*NES emulator development guide*</div><div class='line' id='LC3'>********************************</div><div class='line' id='LC4'>Brad Taylor (BTTDgroup@hotmail.com)</div><div class='line' id='LC5'>4th release: April 23rd, 2004</div><div class='line' id='LC6'>Thanks to the NES community. http://nesdev.parodius.com.</div><div class='line' id='LC7'>recommended literature: 2A03/2C02/FDS technical reference documents</div><div class='line' id='LC8'><br/></div><div class='line' id='LC9'><br/></div><div class='line' id='LC10'>Overview of document</div><div class='line' id='LC11'>--------------------</div><div class='line' id='LC12'>- a guide for programmers writing their own NES/FC emulator software</div><div class='line' id='LC13'>- provides many code optimization tips (with focus placed on the x86-based </div><div class='line' id='LC14'>personal computing platform)</div><div class='line' id='LC15'>- provides lists of features to implement in an emulator intended for </div><div class='line' id='LC16'>public-domain release</div><div class='line' id='LC17'>- created in an effort to improve the quality of the user&#39;s NES gaming </div><div class='line' id='LC18'>experience</div><div class='line' id='LC19'><br/></div><div class='line' id='LC20'><br/></div><div class='line' id='LC21'>Topics discussed</div><div class='line' id='LC22'>----------------</div><div class='line' id='LC23'>General PPU emulation</div><div class='line' id='LC24'>Pixel rendering techniques</div><div class='line' id='LC25'>Merging playfield &amp; object pixels</div><div class='line' id='LC26'>Frame store optimizations</div><div class='line' id='LC27'>Smooth audio reproduction</div><div class='line' id='LC28'>6502 instruction decoding &amp; execution techniques</div><div class='line' id='LC29'>Emulation address decoding</div><div class='line' id='LC30'>Hardware port queueing</div><div class='line' id='LC31'>Threading NES applications</div><div class='line' id='LC32'>Emulator features to support</div><div class='line' id='LC33'>New object-oriented NES file format specification</div><div class='line' id='LC34'><br/></div><div class='line' id='LC35'><br/></div><div class='line' id='LC36'>+---------------------+</div><div class='line' id='LC37'>|General PPU emulation|</div><div class='line' id='LC38'>+---------------------+</div><div class='line' id='LC39'>Most likely, the key to your emulator&#39;s performance will be based on the </div><div class='line' id='LC40'>speed at which it can render NES graphics. It&#39;s pretty easy to write a slow </div><div class='line' id='LC41'>PPU render engine, since overall there&#39;s a good deal of work that has to be </div><div class='line' id='LC42'>done. Accurate emulation of the PPU is difficult, due to all the trickery </div><div class='line' id='LC43'>various NES games use to achieve special video effects (like split screen </div><div class='line' id='LC44'>scrolling), otherwise not possible by &quot;clean&quot; or conventional means. In </div><div class='line' id='LC45'>reality, all these &quot;tricks&quot; are simply accomplished by writing to the </div><div class='line' id='LC46'>appropriate PPU (or related) registers at the right time during the </div><div class='line' id='LC47'>rendering of a frame (picture).</div><div class='line' id='LC48'><br/></div><div class='line' id='LC49'>On a hardware level, the CPU &amp; PPU in the NES run simultaniously. This is </div><div class='line' id='LC50'>why a game can be coded to make a write out to a PPU register at a certain </div><div class='line' id='LC51'>time during a frame, and the result of this is that the (on-screen) effect </div><div class='line' id='LC52'>occurs in a specific location on the screen. Thus, the first instinct one </div><div class='line' id='LC53'>has for writing a NES emulator is to execute both the CPU &amp; PPU engines </div><div class='line' id='LC54'>alternately on every (NES) clock cycle. The results of this will give very </div><div class='line' id='LC55'>accurate emulation, BUT- doing this will also be VERY processor intense </div><div class='line' id='LC56'>(this will mostly be due to all the overhead of transfering program control </div><div class='line' id='LC57'>to so many hardware emulation routines in such little time (1 CPU clock </div><div class='line' id='LC58'>cycle)). As a result, emulators coded like this turn out to be the slowest </div><div class='line' id='LC59'>ones.</div><div class='line' id='LC60'><br/></div><div class='line' id='LC61'><br/></div><div class='line' id='LC62'>PPU info</div><div class='line' id='LC63'>--------</div><div class='line' id='LC64'>NES graphics consist of a single scrollable playfield, and 64 </div><div class='line' id='LC65'>objects/sprites. The screen resolution is 256*240 pixels, and while games </div><div class='line' id='LC66'>can control the graphics on a per-pixel basis, it is usually avoided since </div><div class='line' id='LC67'>it&#39;s pretty difficult. Instead, the PPU makes displaying graphics easier for </div><div class='line' id='LC68'>the programmer by dividing the screen up into tiles, which index an 8*8 </div><div class='line' id='LC69'>pixel bitmap to appear in that particular spot. Each object defines 1 or 2 </div><div class='line' id='LC70'>tiles to be displayed on a randomly-accessable xy coordinate on the screen. </div><div class='line' id='LC71'>There are also 8 palette tables in the PPU that bitmap data can refer to </div><div class='line' id='LC72'>(playfield &amp; object bitmap data each have 4 palettes). Each palette has 3 </div><div class='line' id='LC73'>indexable colors, as tile bitmaps only consist of 2 bits per pixel (the 00 </div><div class='line' id='LC74'>combination is considered transparency). A single transparency color palette </div><div class='line' id='LC75'>register is also defined, and is only used as the on-screen color when </div><div class='line' id='LC76'>overlapping pixels (due to objects being placed on the playfield) of all </div><div class='line' id='LC77'>playfield/object pixels are defined as transparent.</div><div class='line' id='LC78'><br/></div><div class='line' id='LC79'>As graphics are rendered (as described in the &quot;2C02 technical reference&quot; </div><div class='line' id='LC80'>document), the name tables are accessed sequentially to reference a tile&#39;s </div><div class='line' id='LC81'>bitmap, which gets used as the pixel data for the area of the screen that </div><div class='line' id='LC82'>the name table index entry corresponds to (offset by the scroll register </div><div class='line' id='LC83'>values). Attribute tables, which are layed out the same way that name tables </div><div class='line' id='LC84'>are (except with lower resolution- 1 attribute entry represents a 2*2 </div><div class='line' id='LC85'>cluster of on-screen tiles), determine the palette select value for the </div><div class='line' id='LC86'>group of tiles to use (1 of 4).</div><div class='line' id='LC87'><br/></div><div class='line' id='LC88'>Objects attribute memory (sprite RAM, or &quot;OAM&quot; which contain private tile </div><div class='line' id='LC89'>index and palette select information) is evaluated every single scanline </div><div class='line' id='LC90'>(y-coordinate entries are examined), and in-range objects have thier tile </div><div class='line' id='LC91'>bitmaps loaded into the PPU inbetween scanlines. The contents are then </div><div class='line' id='LC92'>merged with the playfield&#39;s pixel data in real-time.</div><div class='line' id='LC93'><br/></div><div class='line' id='LC94'><br/></div><div class='line' id='LC95'>Accurate &amp; efficient PPU emulation</div><div class='line' id='LC96'>----------------------------------</div><div class='line' id='LC97'>For the most part, PPU operations are linear and sequential, making them </div><div class='line' id='LC98'>easy to design algorithms for. By rendering playfields and objects on a </div><div class='line' id='LC99'>per-tile basis, emulation can be made quick &amp; easy. However, games that use </div><div class='line' id='LC100'>special effects (mid-frame PPU trickery) require special handling, which in </div><div class='line' id='LC101'>turn complicates algorithm design.</div><div class='line' id='LC102'><br/></div><div class='line' id='LC103'>By implementing a clock cycle counter in the CPU core, it is possible for </div><div class='line' id='LC104'>emulated PPU hardware to know exactly when a read/write is occuring to a </div><div class='line' id='LC105'>PPU-related register (or otherwise, a register which is going to change the </div><div class='line' id='LC106'>rendering of graphics from that point on). Therefore, when a write to a PPU </div><div class='line' id='LC107'>register occurs, the PPU engine can then determine if the write is going to </div><div class='line' id='LC108'>change the way the picture is going to be rendered, and at the exact clock </div><div class='line' id='LC109'>cycle (which really translates into a screen position).</div><div class='line' id='LC110'><br/></div><div class='line' id='LC111'>For example, say the CPU engine is executing instructions. Then, on clock </div><div class='line' id='LC112'>cycle 13000 (relative to the last VINT), a write to the PPU&#39;s scroll </div><div class='line' id='LC113'>registers are made (which causes a split-screen effect). Now, first the PPU </div><div class='line' id='LC114'>translates 13000 CC&#39;s into X/Y coordinates (in this case, on-screen scanline </div><div class='line' id='LC115'>93, roughly pixel #126 (the equations to do these calculations will be </div><div class='line' id='LC116'>revealed later)). Ideally*, all pixels before this point will now be </div><div class='line' id='LC117'>rendered to a buffer, using the data in the PPU registers prior to the </div><div class='line' id='LC118'>write. Now the screen area before the write occured has been rendered </div><div class='line' id='LC119'>accurately, and the screen will progressively continue to be updated in this </div><div class='line' id='LC120'>fashion as more mid-frame writes occur. If no more occur, when the CPU </div><div class='line' id='LC121'>arrives at the # of clock cycles per frame, the rest of the image (if any) </div><div class='line' id='LC122'>can be rendered.</div><div class='line' id='LC123'><br/></div><div class='line' id='LC124'>* As will be discussed in the following &quot;Frame store optimizations&quot; and </div><div class='line' id='LC125'>&quot;Hardware port queueing&quot; sections, maintaining a &quot;stack&quot;, or more </div><div class='line' id='LC126'>specifically, a queue of mid-frame PPU changes (which effect how successive </div><div class='line' id='LC127'>rendering in the frame occurs), and only executing a PPU render routine once </div><div class='line' id='LC128'>per frame (which then processes the stack of mid-frame writes) is a more </div><div class='line' id='LC129'>efficient way of dividing up emulation tasks in your emulator.</div><div class='line' id='LC130'><br/></div><div class='line' id='LC131'><br/></div><div class='line' id='LC132'>Knowing when to update the screen</div><div class='line' id='LC133'>---------------------------------</div><div class='line' id='LC134'>The following list describes PPU status registers/bits that if a game </div><div class='line' id='LC135'>modified/changed mid-frame, would change the way the rest of the frame is </div><div class='line' id='LC136'>rendered. O = update objects, P = update playfield.</div><div class='line' id='LC137'><br/></div><div class='line' id='LC138'>O	object enable bit</div><div class='line' id='LC139'>O	left column objects clipping</div><div class='line' id='LC140'>O	8/16 scanline objects</div><div class='line' id='LC141'>O	active object pattern table</div><div class='line' id='LC142'>O	pattern table bankswitch (which effects active object pattern table)</div><div class='line' id='LC143'><br/></div><div class='line' id='LC144'>PO	color emphasis bits</div><div class='line' id='LC145'>PO	black &amp; white/color select</div><div class='line' id='LC146'><br/></div><div class='line' id='LC147'>P	playfield enable bit</div><div class='line' id='LC148'>P	left column playfield clipping</div><div class='line' id='LC149'>P	scroll registers</div><div class='line' id='LC150'>P	X/Y name table selection</div><div class='line' id='LC151'>P	name table bankswitch (hypothetical)</div><div class='line' id='LC152'>P	active playfield pattern table</div><div class='line' id='LC153'>P	pattern table bankswitch (which effects active playfield pattern table)</div><div class='line' id='LC154'><br/></div><div class='line' id='LC155'>Note that any PPU mapped memory (which means name, pattern, attribute &amp; </div><div class='line' id='LC156'>palette tables) can only be changed while objects &amp; the playfield are </div><div class='line' id='LC157'>disabled (unless cartridge hardware provides a way to do this through the </div><div class='line' id='LC158'>CPU memory map). Since the screen is blanked to black during this time </div><div class='line' id='LC159'>(regardless of the current transparency color the palette is programmed </div><div class='line' id='LC160'>with), these writes do not effect how the screen is rendered, and </div><div class='line' id='LC161'>subsequently, updating the screen can be postponed.</div><div class='line' id='LC162'><br/></div><div class='line' id='LC163'><br/></div><div class='line' id='LC164'>Collision flag</div><div class='line' id='LC165'>--------------</div><div class='line' id='LC166'>Games without hardware for scanline counting often poll this bit to find out </div><div class='line' id='LC167'>when to make a write out to a PPU register which will result in a split </div><div class='line' id='LC168'>screen, or a pattern table swap/bankswitch. The collision flag is set when </div><div class='line' id='LC169'>the first non-transparent pixel of object 0 collides with a playfield pixel </div><div class='line' id='LC170'>that is also non-xparent. Since the screen position of the first colliding </div><div class='line' id='LC171'>pixel can be determined at any time (and therefore, exact CPU clock cycle at </div><div class='line' id='LC172'>which the collision is expected to occur), when a game requests the status </div><div class='line' id='LC173'>of this flag for the first time, a routine part of the PPU engine can </div><div class='line' id='LC174'>calculate at which clock cycle this flag will be set (calculations will be </div><div class='line' id='LC175'>shown later). Subsequent requests for the collision flag&#39;s status after this </div><div class='line' id='LC176'>would then only require the engine to compare the current CPU clock cycle, </div><div class='line' id='LC177'>to the calculated collision clock cycle. Whenever a mid-frame change occurs </div><div class='line' id='LC178'>(whether it effects the playfield, or objects), the clock cycle at which the </div><div class='line' id='LC179'>collision flag will go off will have to be recalculated (unless it has </div><div class='line' id='LC180'>already gone off).</div><div class='line' id='LC181'><br/></div><div class='line' id='LC182'><br/></div><div class='line' id='LC183'>MMC3 IRQ timer</div><div class='line' id='LC184'>--------------</div><div class='line' id='LC185'>The MMC3&#39;s IRQ timer relies on the toggling of the PPU&#39;s A13 line 42 times a </div><div class='line' id='LC186'>scanline. Basically, it&#39;s counting operation is more or less at a constant </div><div class='line' id='LC187'>rate (meaning predictable). However, when the PPU bus is disabled (via </div><div class='line' id='LC188'>disabling the playfield &amp; objects, or during the V-blank period), the </div><div class='line' id='LC189'>counter must quit counting. Manual toggling of PPU address bits during this </div><div class='line' id='LC190'>time will have to be intercepted, and the IRQ timer advanced appropriately.</div><div class='line' id='LC191'><br/></div><div class='line' id='LC192'><br/></div><div class='line' id='LC193'>CPUCC to X/Y coordinate equations</div><div class='line' id='LC194'>---------------------------------</div><div class='line' id='LC195'>The PPU renders 3 pixels in one CPU clock. Therefore, by multiplying the CPU </div><div class='line' id='LC196'>CC figure by 3, we get the total amount of pixels that have been rendered </div><div class='line' id='LC197'>(including non-displayed ones) since the VINT.</div><div class='line' id='LC198'><br/></div><div class='line' id='LC199'>341 pixels are rendered per scanline (although only 256 are displayed). </div><div class='line' id='LC200'>Therefore, by dividing PPUCC by this, we get the # of completely rendered </div><div class='line' id='LC201'>scanlines since the VINT.</div><div class='line' id='LC202'><br/></div><div class='line' id='LC203'>21 blank scanlines are rendered before the first visible one is displayed. </div><div class='line' id='LC204'>So, to get a scanline offset into the actual on-screen image, we simply </div><div class='line' id='LC205'>subtract the amount of non-displayed scanlines. Note that if this yeilds a </div><div class='line' id='LC206'>negative number, the PPU is still in the V-blank period.</div><div class='line' id='LC207'><br/></div><div class='line' id='LC208'>PPUCC = CPUCC * 3</div><div class='line' id='LC209'>Scanline = PPUCC div 341 - 21;	X- coordinate</div><div class='line' id='LC210'>PixelOfs = PPUCC mod 341;     	Y- coordinate</div><div class='line' id='LC211'>CPUcollisionCC = ((Y+21)*341+X)/3</div><div class='line' id='LC212'><br/></div><div class='line' id='LC213'>Note that if the PixelOfs equation yeilds a number higher than 255, the PPU </div><div class='line' id='LC214'>is in the H-blank period.</div><div class='line' id='LC215'><br/></div><div class='line' id='LC216'><br/></div><div class='line' id='LC217'>Note on emulating Tengen&#39;s Ms.Pac Man game</div><div class='line' id='LC218'>------------------------------------------</div><div class='line' id='LC219'>For emulators with poor 6502 cycle count provisions, there is a small </div><div class='line' id='LC220'>problem that may arise when trying to run this game. During initialization, </div><div class='line' id='LC221'>this game will loop, waiting for $2002&#39;s vbl flag to set. When a NMI occurs, </div><div class='line' id='LC222'>the NMI routine reads $2002 and throws away the value. Even though the NMI </div><div class='line' id='LC223'>routine saves the A register from the main loop (where $2002 was loaded), </div><div class='line' id='LC224'>the only way the PC will exit this loop is if $2002 returns the vbl flag set </div><div class='line' id='LC225'>*just* before the NMI is executed. since the NMI is invoked pending the </div><div class='line' id='LC226'>completion of the current instruction, and the vbl flag *IS* the NMI flag, </div><div class='line' id='LC227'>the VBL flag must get set in the middle of the LDA instruction. Since there </div><div class='line' id='LC228'>are 2 instructions in the main loop, there&#39;s about a 50% chance of the read </div><div class='line' id='LC229'>value from $2002 being pushed on the stack with the vbl bit set. A </div><div class='line' id='LC230'>work-around for emulators that can&#39;t handle this mid-instruction taboo, is </div><div class='line' id='LC231'>to set the vbl bit slightly before the NMI routine is invoked.</div><div class='line' id='LC232'><br/></div><div class='line' id='LC233'><br/></div><div class='line' id='LC234'>Other notes</div><div class='line' id='LC235'>-----------</div><div class='line' id='LC236'>- some games rely on the proper implementation of collision, and dropping </div><div class='line' id='LC237'>object flags in register $2002. this is usually done to implement up to 3 </div><div class='line' id='LC238'>independent horizontally-tiled scrollable playfields. Make sure these flags </div><div class='line' id='LC239'>are set at the right time, and stay set until scanline 20 of the next frame </div><div class='line' id='LC240'>(relative to /NMI).</div><div class='line' id='LC241'><br/></div><div class='line' id='LC242'>- (courtesy of Xodnizel): &quot;When I messed around with emulating MMC3 games in </div><div class='line' id='LC243'>this manner (described above), I got the best results by resetting the </div><div class='line' id='LC244'>count-to-42 counter to 0 on writes to $c001. Or in other words, I reset the </div><div class='line' id='LC245'>&quot;count to zero&quot; counter to 42.&quot;</div><div class='line' id='LC246'><br/></div><div class='line' id='LC247'><br/></div><div class='line' id='LC248'>+--------------------------+</div><div class='line' id='LC249'>|Pixel rendering techniques|</div><div class='line' id='LC250'>+--------------------------+</div><div class='line' id='LC251'>3 rendering techniques are described in this section. They are all real-time </div><div class='line' id='LC252'>techniques. An unreleased version of this document discussed a tile </div><div class='line' id='LC253'>cache-based rendering solution. However, tile caching quickly loses it&#39;s </div><div class='line' id='LC254'>effectiveness for those games that use mid-frame (or even mid-scanline) </div><div class='line' id='LC255'>trickery to change character sets, or even palette values. Additionally, </div><div class='line' id='LC256'>with powerful seventh-generation Pentium processor-based PC&#39;s being the </div><div class='line' id='LC257'>slowest computers out there these days, there&#39;s really no need to use bitmap </div><div class='line' id='LC258'>caching algorithms to emulate NES graphics anymore, as was neccessary in the </div><div class='line' id='LC259'>days of 486-based PCs in order to achieve full NES framerate emulation.</div><div class='line' id='LC260'><br/></div><div class='line' id='LC261'><br/></div><div class='line' id='LC262'>Basic</div><div class='line' id='LC263'>-----</div><div class='line' id='LC264'>This method, which is the most straightforward, is to store the PPU&#39;s </div><div class='line' id='LC265'>52-color matrix as constant data in the VGA palette registers (or otherwise, </div><div class='line' id='LC266'>other palette registers used for an 8-bit per pixel graphics mode). Before a </div><div class='line' id='LC267'>pixel can be drawn, pixel color is calculated (via pattern table &amp; palette </div><div class='line' id='LC268'>select data). The PPU palette registers are looked up in some way or </div><div class='line' id='LC269'>another, and the contents of the palette register element is written to a </div><div class='line' id='LC270'>virtual frame buffer as the pixel data. This technique is the easiest to </div><div class='line' id='LC271'>implement, and provides the most accurate PPU emulation. However, since </div><div class='line' id='LC272'>every pixel drawn requires an independent palette look-up, this method is </div><div class='line' id='LC273'>naturally very slow.</div><div class='line' id='LC274'><br/></div><div class='line' id='LC275'>One way to speed up this rendering style is to create a palette table </div><div class='line' id='LC276'>designed for looking up 2 or more pixels simultaniously. The advantages are </div><div class='line' id='LC277'>clear: you could easily shave alot of time (close to half with a 2 </div><div class='line' id='LC278'>simultanious color lookup) off playfield rendering. The disadvantages are </div><div class='line' id='LC279'>that the lookup table grows from 2^2*1=4 bytes for a single pixel lookup, to </div><div class='line' id='LC280'>2^4*2=32 bytes for a 2-pixel lookup, to 2^8*4=1024 bytes for a 4-pixel </div><div class='line' id='LC281'>lookup. Each of the palette&#39;s 4 colors is also mirrored across these tables, </div><div class='line' id='LC282'>and this has to be maintained. Since I&#39;ve never tried this optimization </div><div class='line' id='LC283'>technique, I can&#39;t tell you how effective it is (or when it stops being </div><div class='line' id='LC284'>effective).</div><div class='line' id='LC285'><br/></div><div class='line' id='LC286'>Another way to increase the speed of this approach is to change the bit </div><div class='line' id='LC287'>ordering of the pattern tables stored in memory to favor this rendering </div><div class='line' id='LC288'>algorithm. For example, store the bitmap for any scanline of a tile in an 8- </div><div class='line' id='LC289'>2-bit packed pixel format, instead of the 2- 8-bit planar method used by </div><div class='line' id='LC290'>default. By doing this, it will allow the tile rendering routine to easily </div><div class='line' id='LC291'>extract the 2-bit number for indexing the 4 color palette associated with </div><div class='line' id='LC292'>the particular tile. Of course, by changing the pattern tables, whenever </div><div class='line' id='LC293'>pattern table memory is read or written to, the format of the data will have </div><div class='line' id='LC294'>to be converted. Since this happens much less often (even in games that use </div><div class='line' id='LC295'>CHR-RAM), it&#39;s a good idea.</div><div class='line' id='LC296'><br/></div><div class='line' id='LC297'><br/></div><div class='line' id='LC298'>VGA palette register indexed</div><div class='line' id='LC299'>----------------------------</div><div class='line' id='LC300'>This method involves programming the VGA palette registers to reflect the </div><div class='line' id='LC301'>direct values the PPU palette registers contain. The VGA palette would be </div><div class='line' id='LC302'>divided into 64- 4 color palettes. When sequential horizontal pixels are to </div><div class='line' id='LC303'>be drawn, a large (32-bit or more) pattern table data fetch can occur </div><div class='line' id='LC304'>(pixels for pattern table tiles should be organized in memory so that the 2 </div><div class='line' id='LC305'>bits for each horizontally sequential pixel are stored in 8-bit increments). </div><div class='line' id='LC306'>This chunk of fetched pixel data can then be masked (so that other pixel </div><div class='line' id='LC307'>data from the chunk is not used), an indexed &quot;VGA palette select&quot; value can </div><div class='line' id='LC308'>be added to the value, and finally can then be written out to the virtual </div><div class='line' id='LC309'>frame buffer in one single store operation. The &quot;VGA palette select&quot; value </div><div class='line' id='LC310'>is fetched via the VGA palette select table, which corresponds to the 8 </div><div class='line' id='LC311'>classic PPU palettes (4*2 elements in the table; therefore, a tile&#39;s </div><div class='line' id='LC312'>attribute data (either PF or OBJ) is used as the index into this table). </div><div class='line' id='LC313'>This table indicates which 4-color group of 64 groups in the VGA palette to </div><div class='line' id='LC314'>use for color selection for the group of pixels being written. The idea is </div><div class='line' id='LC315'>that when a mid-frame palette change occurs (or at any time, for that </div><div class='line' id='LC316'>matter), the affected PPU palette in this table is changed to point to where </div><div class='line' id='LC317'>the new palette modifications will be made in the VGA&#39;s palette. The </div><div class='line' id='LC318'>corresponding VGA palette entries will also have to be updated appropriately </div><div class='line' id='LC319'>(generally, VGA palette updates will be made in a ring-buffer fashion. A </div><div class='line' id='LC320'>pointer which keeps track of the first available 4 palette entries will be </div><div class='line' id='LC321'>incremented when any entries in a 4-color PPU palette are changed).</div><div class='line' id='LC322'><br/></div><div class='line' id='LC323'>Basically, this method offers the fastest possible way to render NES </div><div class='line' id='LC324'>graphics, since data is fetched from pattern table memory and written </div><div class='line' id='LC325'>directly to the virtual frame buffer. The number of pixels processed </div><div class='line' id='LC326'>simultaniously can be as high as 8 (with MMX instructions). However, the # </div><div class='line' id='LC327'>of mid-screen PPU palette modifications possible is limited to 64 times (or </div><div class='line' id='LC328'>32 for PF and 32 for OBJs, if one of the bits in every pixel needs to be </div><div class='line' id='LC329'>used to distinguish a playfield pixel from an object), but multiple </div><div class='line' id='LC330'>consecutive modifications to a single 4-color PPU palette only count as one </div><div class='line' id='LC331'>actual modification.</div><div class='line' id='LC332'><br/></div><div class='line' id='LC333'><br/></div><div class='line' id='LC334'>MMX instruction-based rendering</div><div class='line' id='LC335'>-------------------------------</div><div class='line' id='LC336'>In 1995, the x86 architecture became blessed with MMX instructions: a set of </div><div class='line' id='LC337'>single function, multiple data, RISC-like instructions, that provide </div><div class='line' id='LC338'>solutions for solving a large amount of modern-day logic puzzles. Nearly all </div><div class='line' id='LC339'>the instructions have a very low 1 or 2 clock cycle latency across all x86 </div><div class='line' id='LC340'>class CPUs which support them, hence these instructions are very desirable </div><div class='line' id='LC341'>to use. The instructions work around an 8 element (64-bits/element) flat </div><div class='line' id='LC342'>register file, which overlaps the legacy x87&#39;s mantissa registers. The BIG </div><div class='line' id='LC343'>deal about use of MMX instructions for pixel rendering is that 8 pixels can </div><div class='line' id='LC344'>be operated on simultaniously, providing each pixel is no larger than a </div><div class='line' id='LC345'>byte. The following assembly-written routine can fully calculate pixel color </div><div class='line' id='LC346'>for 8 horizontally sequential pixels for every loop iteration (the example </div><div class='line' id='LC347'>actually renders the first 4 scanlines of a tile).</div><div class='line' id='LC348'><br/></div><div class='line' id='LC349'>Note: Pentium 4 and Athlon XP/64 processors support 128-bit versions of MMX </div><div class='line' id='LC350'>instructions, so this could allow you to increase performance quite a bit </div><div class='line' id='LC351'>more than what is already offered by the algorithm documented below. Very </div><div class='line' id='LC352'>useful for virtual NES multitasking, when 20 or more NES screens need to be </div><div class='line' id='LC353'>animated &amp; displayed simultaniously in a high-resolution screen mode.</div><div class='line' id='LC354'><br/></div><div class='line' id='LC355'>The pattern tables have already been reorganized so that the bitmap data for </div><div class='line' id='LC356'>4 scanlines of tile data can be loaded into an MMX register, and used in the </div><div class='line' id='LC357'>most efficient way possible. Pixel data for 4 sequential scanlines under the </div><div class='line' id='LC358'>same horizontal coordinate is stored in a single byte, with the 2 MSBs </div><div class='line' id='LC359'>containing the lowest logical scanline coordinate. Sequential bytes, up to </div><div class='line' id='LC360'>the 8th one, contain the pixel data for every successive horizontal </div><div class='line' id='LC361'>position. Finally, the first 8 bytes of a tile&#39;s pattern table data contain </div><div class='line' id='LC362'>the full bitmap data for the first 4 scanlines of the tile, and the next 8 </div><div class='line' id='LC363'>bytes contain the last 4 scanlines.</div><div class='line' id='LC364'><br/></div><div class='line' id='LC365'><br/></div><div class='line' id='LC366'>####################################</div><div class='line' id='LC367'><br/></div><div class='line' id='LC368'>;register assignments</div><div class='line' id='LC369'>;--------------------</div><div class='line' id='LC370'>;EAX:	destination pixel pointer</div><div class='line' id='LC371'>;EBX:	points to the palette to be used for this tile (essentially determined </div><div class='line' id='LC372'>by the attribute table lookup)</div><div class='line' id='LC373'>;ESI:	source pointer for 32-pixel bitmap to be loaded from pattern table</div><div class='line' id='LC374'>;MM4:	(8 - fine horizontal scroll value)*8</div><div class='line' id='LC375'>;MM5:	(    fine horizontal scroll value)*8</div><div class='line' id='LC376'><br/></div><div class='line' id='LC377'><br/></div><div class='line' id='LC378'>;fetch 32 pixels from pattern table, organized as 8 horizontal x 4 vertical.</div><div class='line' id='LC379'>	movq        mm3,[esi]</div><div class='line' id='LC380'>	mov         ecx,-4;           load negative loop count</div><div class='line' id='LC381'><br/></div><div class='line' id='LC382'>;move constants related to color calculation directly into registers. These </div><div class='line' id='LC383'>have to be stored in memory since MMX instructions don&#39;t allow the use of </div><div class='line' id='LC384'>immediate data as an operand.</div><div class='line' id='LC385'>@1:	movq        mm0,_C0x8;        contains C0C0C0C0C0C0C0C0h</div><div class='line' id='LC386'>	movq        mm1,_00x8;        contains 0000000000000000h</div><div class='line' id='LC387'>	movq        mm2,_40x8;        contains 4040404040404040h</div><div class='line' id='LC388'><br/></div><div class='line' id='LC389'>;generate masks depending on the magnitude of the 2 MSBs in each packed byte </div><div class='line' id='LC390'>(note that this is a signed comparison).</div><div class='line' id='LC391'>	pcmpgtb     mm0,mm3</div><div class='line' id='LC392'>	pcmpgtb     mm1,mm3</div><div class='line' id='LC393'>	pcmpgtb     mm2,mm3</div><div class='line' id='LC394'>	psllq       mm3,2;            shift bitmap to access next scanline of </div><div class='line' id='LC395'>pixels</div><div class='line' id='LC396'><br/></div><div class='line' id='LC397'>;to perform color lookup, a precalculated palette table is used &amp; ANDed with </div><div class='line' id='LC398'>the resulting masks of the last operation. Since XOR operations are used to </div><div class='line' id='LC399'>combine the results, this requires the elements in the palette table to be </div><div class='line' id='LC400'>XORed with adjacent values, so that they&#39;ll be cancelled out at the end of </div><div class='line' id='LC401'>the logic processing here. The required precalculated XOR combination of </div><div class='line' id='LC402'>each color element is shown in the comments below by the corresponding </div><div class='line' id='LC403'>element. Note that each lookup is 8 bytes wide; this requires the same </div><div class='line' id='LC404'>palette data for a single element to be mirrored across all 8 sequential </div><div class='line' id='LC405'>bytes.</div><div class='line' id='LC406'>	pand        mm0,[ebx+00];     2^3</div><div class='line' id='LC407'>	pand        mm1,[ebx+08];     3^0</div><div class='line' id='LC408'>	pand        mm2,[ebx+16];     0^1</div><div class='line' id='LC409'>	pxor        mm0,[ebx+24];     1</div><div class='line' id='LC410'>	pxor        mm1,mm2</div><div class='line' id='LC411'>	pxor        mm0,mm1</div><div class='line' id='LC412'><br/></div><div class='line' id='LC413'>;this logic performs shift functionality, in order to implement fine </div><div class='line' id='LC414'>horizontal scrolling. The alternative to this is simply writing 64 bits out </div><div class='line' id='LC415'>to unaligned addresses for fine H scroll values other than zero, but since </div><div class='line' id='LC416'>this can incur large penalties on modern processors, this is generally the </div><div class='line' id='LC417'>preferred way to generate the fine horizontal scroll effect.</div><div class='line' id='LC418'>	movq        mm1,mm0</div><div class='line' id='LC419'>	psllq       mm0,mm4</div><div class='line' id='LC420'>	psrlq       mm1,mm5</div><div class='line' id='LC421'>	por         mm0,[eax]</div><div class='line' id='LC422'>	movq        [eax+8],mm1</div><div class='line' id='LC423'>	movq        [eax  ],mm0</div><div class='line' id='LC424'><br/></div><div class='line' id='LC425'>;loop maintenence</div><div class='line' id='LC426'>	add         eax,LineLen;      advance pixel pointer to next scanline </div><div class='line' id='LC427'>position</div><div class='line' id='LC428'>	inc         ecx</div><div class='line' id='LC429'>	jnz         @1</div><div class='line' id='LC430'><br/></div><div class='line' id='LC431'><br/></div><div class='line' id='LC432'>###################################</div><div class='line' id='LC433'><br/></div><div class='line' id='LC434'>To use the renderer, point EAX to the beginning of your render buffer (due </div><div class='line' id='LC435'>to how the fine horizontal scrolling works, tiles must be rendered next to </div><div class='line' id='LC436'>each other, incrementing along the horizontal tile axis). Without some ugly </div><div class='line' id='LC437'>extra logic, the render buffer will have to be increased in size by 8 pixels </div><div class='line' id='LC438'>per scanline, to accomodate for the extra tile pattern fetch required </div><div class='line' id='LC439'>whenever the fine horizontal scroll value is not equal to zero. Once the </div><div class='line' id='LC440'>routine has been executed enough times to fill your render buffer, consider </div><div class='line' id='LC441'>the starting horizontal coordinates of the rendered playfield to be offset </div><div class='line' id='LC442'>by 8 pixels, due to a required &quot;spilloff area&quot; for when the first tile </div><div class='line' id='LC443'>pattern for that line needs to be shifted off the screen.</div><div class='line' id='LC444'><br/></div><div class='line' id='LC445'><br/></div><div class='line' id='LC446'>Branch prediction</div><div class='line' id='LC447'>-----------------</div><div class='line' id='LC448'>Pentium MMX and later processors have improved branch prediction hardware </div><div class='line' id='LC449'>over the original Pentium, and consequently can correctly detect a branch </div><div class='line' id='LC450'>condition pattern, so long as the condition does not stay the same for more </div><div class='line' id='LC451'>than 4 times in a row. The new system is based on keeping track of the last </div><div class='line' id='LC452'>4 known conditions for any branch that may be allocated in the BTB. Those 4 </div><div class='line' id='LC453'>bits are used to index a 16-element table to fetch 2 bits that indicate the </div><div class='line' id='LC454'>predicted branch condition (strongly taken, taken, not taken, strongly not </div><div class='line' id='LC455'>taken), which is then written back after using saturated addition to </div><div class='line' id='LC456'>increment or decrement the value, based on the actual branch condition that </div><div class='line' id='LC457'>came from the program.</div><div class='line' id='LC458'><br/></div><div class='line' id='LC459'>- The above MMX-based renderer requires 4 or less loop iterations to render </div><div class='line' id='LC460'>tiles. This loop count is very suitable for efficient execution on </div><div class='line' id='LC461'>modern-day processors. So long as this loop count stays relatively constant </div><div class='line' id='LC462'>during playfield rendering, and always less than 5, very little mispredicts </div><div class='line' id='LC463'>should occur.</div><div class='line' id='LC464'><br/></div><div class='line' id='LC465'>- Don&#39;t modify the above algorithm to draw a full 8-scanline tile. Instead, </div><div class='line' id='LC466'>use another loop counter to have the renderer code reused when more </div><div class='line' id='LC467'>4-scanline tile blocks have to be drawn.</div><div class='line' id='LC468'><br/></div><div class='line' id='LC469'>- Try to keep a render buffer of at least 32 scanlines. This size is </div><div class='line' id='LC470'>sufficient to ensure that object scanline render counts for the largest </div><div class='line' id='LC471'>sized-ones can stay constant at 16 throughout rendering (provided the game </div><div class='line' id='LC472'>doesn&#39;t do anything to disturb the continuity of object rendering), and this </div><div class='line' id='LC473'>will help avoid branch mispredicts in the object renderer loop.</div><div class='line' id='LC474'><br/></div><div class='line' id='LC475'><br/></div><div class='line' id='LC476'>+---------------------------------+</div><div class='line' id='LC477'>|Merging playfield &amp; object pixels|</div><div class='line' id='LC478'>+---------------------------------+</div><div class='line' id='LC479'>The most efficient way to effectively combine playfield &amp; object data into </div><div class='line' id='LC480'>your final rendered frame, is to always first, render your playfield (or a </div><div class='line' id='LC481'>section of it, in the case of dealing with a split screen) directly to the </div><div class='line' id='LC482'>image buffer itself. At this point, to effectively merge object pixels with </div><div class='line' id='LC483'>the playfield&#39;s, each pixel in your image buffer must have an extra 2 bits </div><div class='line' id='LC484'>associated with it, one of which will represent the transparency status for </div><div class='line' id='LC485'>a playfield pixel, and the other the same, except for object pixels (when </div><div class='line' id='LC486'>drawn later).</div><div class='line' id='LC487'><br/></div><div class='line' id='LC488'>Naturally, after rendering the playfield, the image buffer won&#39;t have any </div><div class='line' id='LC489'>pixels with the transparency status for object pixels marked as false. But </div><div class='line' id='LC490'>now, as objects are rendered, the condition on that the actual pixel is </div><div class='line' id='LC491'>drawn, depends on these two transparency status bits, the objects own </div><div class='line' id='LC492'>transparency status, and it&#39;s priority. Starting in the order from object 0 </div><div class='line' id='LC493'>(highest priority) up to 63, object bitmaps are &quot;merged&quot; with the playfield, </div><div class='line' id='LC494'>in the fashion that the following few lines of pseudo-code will show:</div><div class='line' id='LC495'><br/></div><div class='line' id='LC496'>IF(SrcOBJpixel.xpCond=FALSE)THEN</div><div class='line' id='LC497'>&nbsp;&nbsp;&nbsp;</div><div class='line' id='LC498'>IF((DestPixel.OBJxpCond=TRUE)AND((DestPixel.PFxpCond=TRUE)OR(SrcOBJpixel.Pri=foreground)))THEN</div><div class='line' id='LC499'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DestPixel.data := SrcOBJpixel.data</div><div class='line' id='LC500'>&nbsp;&nbsp;&nbsp;FI</div><div class='line' id='LC501'>&nbsp;&nbsp;&nbsp;DestPixel.OBJxpCond := FALSE</div><div class='line' id='LC502'>FI</div><div class='line' id='LC503'><br/></div><div class='line' id='LC504'>So, as you can see, the destination&#39;s OBJxpCond is marked as false, even if </div><div class='line' id='LC505'>the object&#39;s pixel is not meant to be drawn. This is to prevent the pixels </div><div class='line' id='LC506'>of lower priority (numerically higher-numbered) objects from being drawn in </div><div class='line' id='LC507'>those locations.</div><div class='line' id='LC508'><br/></div><div class='line' id='LC509'>This may raise the question, &quot;Why do you render objects in the order of </div><div class='line' id='LC510'>0-&gt;63 (effectively requiring 2 bits for transparency status), when you can </div><div class='line' id='LC511'>render them in the opposite direction (which only requires 1 bit for </div><div class='line' id='LC512'>transparency status)?&quot; The answer is because of what happens on a priority </div><div class='line' id='LC513'>clash (see the &quot;PPU pixel priority quirk&quot; section of the &quot;2C02 technical </div><div class='line' id='LC514'>reference&quot; document). Rendering objects in order of 0-&gt;63 is the only way to </div><div class='line' id='LC515'>emulate this PPU feature properly (and some games DO depend on the </div><div class='line' id='LC516'>functionality of this, as it provides a way to force the playfield to hide </div><div class='line' id='LC517'>foreground priority object pixels). Otherwise (for 63-&gt;0), it would be </div><div class='line' id='LC518'>neccessary to merge objects to an image buffer filled with the current </div><div class='line' id='LC519'>transparency color, and then, merge playfield data with the buffer as well. </div><div class='line' id='LC520'>Granted, this technique will only require 1 transparency (background </div><div class='line' id='LC521'>priority) status bit per pixel, but since merge operations are slow, and </div><div class='line' id='LC522'>this technique requires way more of them, this technique is inferior to the </div><div class='line' id='LC523'>aforementioned one.</div><div class='line' id='LC524'><br/></div><div class='line' id='LC525'><br/></div><div class='line' id='LC526'>Other tips</div><div class='line' id='LC527'>----------</div><div class='line' id='LC528'>- Depending on your implementation of pixel rendering, you may be able to </div><div class='line' id='LC529'>store the 2 transparency status bits inside the pixel data itself. For </div><div class='line' id='LC530'>example, if only 52 combinations of a rendered pixel are being generated, </div><div class='line' id='LC531'>the upper 2 bits in the pixel&#39;s byte can be used for this storage. This may </div><div class='line' id='LC532'>mean that you&#39;ll have to mirror your video buffer&#39;s palette register RGB </div><div class='line' id='LC533'>information 4 times, but is otherwise a good idea. For 8-bit color VGA </div><div class='line' id='LC534'>modes, a legacy mask register (3C6h) allows the programmer to mask out any </div><div class='line' id='LC535'>bits of the written pixel data that are unrelated to color generation.</div><div class='line' id='LC536'><br/></div><div class='line' id='LC537'>- Don&#39;t use branching to avoid drawing a pixel out somewhere. First of all, </div><div class='line' id='LC538'>it only allows you to process 1 pixel at a time, which is slow. Second, CPUs </div><div class='line' id='LC539'>have a hard time predicting branches based on random data (or at minimum, </div><div class='line' id='LC540'>data that produces a branch pattern which is too long to be stored in the </div><div class='line' id='LC541'>CPU&#39;s branch target buffers). Finally, sequences of SIMD arithmetic and </div><div class='line' id='LC542'>logical operations can be used to merge multiple bytes of data </div><div class='line' id='LC543'>simultaniously (espically with MMX instructions).</div><div class='line' id='LC544'><br/></div><div class='line' id='LC545'>- Avoid unaligned memory access to any data area used by your rendering </div><div class='line' id='LC546'>routines. Each unaligned store incurs a minimum penalty of 3 clocks on a </div><div class='line' id='LC547'>486, and many more clocks on modern processors. Generally, the shift &amp; merge </div><div class='line' id='LC548'>code required to align data which may be stored on any bit boundary, is not </div><div class='line' id='LC549'>going to take more than 5 clocks on any processor. (The MMX-coded example </div><div class='line' id='LC550'>previously shown, demonstrates how to do the shift &amp; merge operation.)</div><div class='line' id='LC551'><br/></div><div class='line' id='LC552'>- Inline code in small loops with a constant # of iterations, espically if </div><div class='line' id='LC553'>the loop count is low, and is the most inner. This reduces overhead by </div><div class='line' id='LC554'>avoiding a backwards branch, and the loop &amp; index counters required. For </div><div class='line' id='LC555'>example, when drawing tiles, it would be a good idea to inline the code to </div><div class='line' id='LC556'>draw 8 horizontal pixels.</div><div class='line' id='LC557'><br/></div><div class='line' id='LC558'><br/></div><div class='line' id='LC559'>+-------------------------+</div><div class='line' id='LC560'>|Frame store optimizations|</div><div class='line' id='LC561'>+-------------------------+</div><div class='line' id='LC562'>One of the simplest approaches to render emulation is to draw the entire </div><div class='line' id='LC563'>playfield to the video buffer, and then place applicable object data in the </div><div class='line' id='LC564'>buffer afterwards (this makes object/playfield pixel decisions easier to </div><div class='line' id='LC565'>calculate since the playfield pixels are already rendered). This </div><div class='line' id='LC566'>straight-forward approach would also be the most efficient way to deal with </div><div class='line' id='LC567'>rendering NES graphics, were there not certain caveats of using the video </div><div class='line' id='LC568'>buffer.</div><div class='line' id='LC569'><br/></div><div class='line' id='LC570'>- Video frame buffer reading is painfully slow. No matter how fast of a </div><div class='line' id='LC571'>video card a computer has, reading video memory is going to be at least 10 </div><div class='line' id='LC572'>(ten!) times slower than writing to it. This would effect the time when </div><div class='line' id='LC573'>objects are being rendered, when the contents of the playfield that underlap </div><div class='line' id='LC574'>the object need to be read in &amp; merged with the object&#39;s pixels.</div><div class='line' id='LC575'><br/></div><div class='line' id='LC576'>- Writing to random places in video memory is painfully slow. Because modern </div><div class='line' id='LC577'>I/O devices (PCI,AGP) in PC&#39;s share address lines with data lines (over the </div><div class='line' id='LC578'>same bus), there&#39;s overhead in writing to a random place in the video </div><div class='line' id='LC579'>memory. This idea was designed with data streaming in mind, so that when </div><div class='line' id='LC580'>sequential writing occurs (a pretty common thing), bus lines which would </div><div class='line' id='LC581'>otherwise be wasted on keeping track of a sequentially-increasing address </div><div class='line' id='LC582'>can now be used to carry data. So, a non-sequential transfer of data to the </div><div class='line' id='LC583'>video card could take as much as double the amount of time that a sequential </div><div class='line' id='LC584'>transfer does. This point alone makes rendering the playfield on a per-tile </div><div class='line' id='LC585'>basis (where you&#39;re basically only storing 8 sequential pixels at a time for </div><div class='line' id='LC586'>each scanline of the tile) directly to the video buffer one of the worst </div><div class='line' id='LC587'>approaches. Sequential data transfers to the video card are close to optimal </div><div class='line' id='LC588'>at 256 bytes at a time and up.</div><div class='line' id='LC589'><br/></div><div class='line' id='LC590'>- Writing to random, unaligned places in video memory is incredibly slow. </div><div class='line' id='LC591'>This is because a merge operation has to take place on the hardware level: a </div><div class='line' id='LC592'>read from the video card (which is already slow), and the write. However, </div><div class='line' id='LC593'>this operation is only required at the beginning &amp; end of an unaligned, </div><div class='line' id='LC594'>sequential transfer. Thus, unaligned data streaming to the video card has </div><div class='line' id='LC595'>less of penalty the larger the transfer is (I measured an 11% additional </div><div class='line' id='LC596'>overhead on an unaligned sequential store of 512 bytes to the video card </div><div class='line' id='LC597'>buffer, and double that for a 256-byte xfer). Video addresses which are </div><div class='line' id='LC598'>divisible by 64 bytes are considered to be aligned.</div><div class='line' id='LC599'><br/></div><div class='line' id='LC600'>- Writing to the video memory in small (byte-by-byte) store operations is a </div><div class='line' id='LC601'>bad idea. While modern PC CPU/chipset hardware may be able to detect &amp; </div><div class='line' id='LC602'>combine several little sequential stores to the video buffer as full-size </div><div class='line' id='LC603'>ones, there&#39;s no guarantee this will happen. Older hardware certainly </div><div class='line' id='LC604'>doesn&#39;t do this. And- if the small writes aren&#39;t being combined together, </div><div class='line' id='LC605'>than guess what? The chipset will perform a merge operation for each data </div><div class='line' id='LC606'>item transfered that isn&#39;t full size. Obviously, this could be the worst </div><div class='line' id='LC607'>possible way to send data to the video buffer (well, next to storing small </div><div class='line' id='LC608'>data at random places in video memory).</div><div class='line' id='LC609'><br/></div><div class='line' id='LC610'>- Writing to a non- linear frame buffer (LFB) is slow. At least on one card </div><div class='line' id='LC611'>I tested, there was a 333% increase in video buffer write speed, after </div><div class='line' id='LC612'>switching from using the legacy one at address 000A0000. I understand that </div><div class='line' id='LC613'>basically any PCI video card has LFB-capabilities, but may be inaccessable </div><div class='line' id='LC614'>due to it&#39;s BIOS, or drivers. I guess that this is really a responsibility </div><div class='line' id='LC615'>of the OS, but either way: use the LFB any way you can.</div><div class='line' id='LC616'><br/></div><div class='line' id='LC617'>Now you should see that it&#39;s just not a good idea to render graphics </div><div class='line' id='LC618'>directly to the video buffer (although I don&#39;t think any one would do this, </div><div class='line' id='LC619'>anyway). Old versions of this document discussed using a virtual frame </div><div class='line' id='LC620'>buffer, which was basically a buffer allocated in regular memory used to </div><div class='line' id='LC621'>render graphics to (instead of directly to the video buffer). When the </div><div class='line' id='LC622'>virtual buffer was full, it would then be copied to the video buffer in a </div><div class='line' id='LC623'>large, sequential operation (just the way the video card likes it!). </div><div class='line' id='LC624'>However, this method is actually quite inefficient, as the next paragraph </div><div class='line' id='LC625'>explains.</div><div class='line' id='LC626'><br/></div><div class='line' id='LC627'><br/></div><div class='line' id='LC628'>Brief info on x86 on-chip caches</div><div class='line' id='LC629'>--------------------------------</div><div class='line' id='LC630'>If you know how virtual memory works, well, a CPU cache is basically like a </div><div class='line' id='LC631'>hardware version of this, although not for a disk drive, but main system </div><div class='line' id='LC632'>RAM. A CPU caches data on a (so-called) line-by-line basis. Each line is </div><div class='line' id='LC633'>anywhere from 16 (486) to 32 (Pentium) to 64 (Athlon) bytes in size, and </div><div class='line' id='LC634'>will most likely grow larger in future CPUs. So, if only a single byte needs </div><div class='line' id='LC635'>to be read from memory, an entire line is actually loaded into the cache </div><div class='line' id='LC636'>(this is why data alignment, and grouping related data fields together in </div><div class='line' id='LC637'>records is important to guarantee the effectiveness of a CPU&#39;s cache). This </div><div class='line' id='LC638'>action also pushes another line out of the cache (ideally the least-recently </div><div class='line' id='LC639'>used one), and if it&#39;s dirty (modified), it will be written back to main </div><div class='line' id='LC640'>memory.</div><div class='line' id='LC641'><br/></div><div class='line' id='LC642'>486&#39;s started the on-chip x86 CPU cache trend, with a whole 8K bytes shared </div><div class='line' id='LC643'>between both data and code. Intel 486DX4 models had 16K bytes. Pentiums had </div><div class='line' id='LC644'>seperate 8K byte caches, each for data &amp; code. 6th generation x86 processors </div><div class='line' id='LC645'>again, doubled the on-chip cache size (although maintained the seperate </div><div class='line' id='LC646'>code/data cache architecture started by the Pentium). The point is, the size </div><div class='line' id='LC647'>of the (level-1) cache is basically the size of memory that the CPU can </div><div class='line' id='LC648'>randomly access for the smallest amount of time possible. For even a 486, </div><div class='line' id='LC649'>this means up to 8K bytes of cachable data structures, which can actually be </div><div class='line' id='LC650'>quite a bit of memory, if the software is written carefully.</div><div class='line' id='LC651'><br/></div><div class='line' id='LC652'>On-chip level 2 cache-based x86 CPU&#39;s (introduced with the second-generation </div><div class='line' id='LC653'>Intel Celeron core) effectively expand the amount of cachable data the CPU </div><div class='line' id='LC654'>holds, while even sometimes hiding access latencies, by speculatively </div><div class='line' id='LC655'>loading level-2 cached data structures into the level-1 cache, when the </div><div class='line' id='LC656'>caching algorithm thinks that the data is going to be used very soon by the </div><div class='line' id='LC657'>software algorithm. A good example of this would be a routine which performs </div><div class='line' id='LC658'>sequential operations on a large array of memory.</div><div class='line' id='LC659'><br/></div><div class='line' id='LC660'>The trick to effective use of the cache is all how software is written. The </div><div class='line' id='LC661'>best thing to do, is to write software algorithms which work with an amount </div><div class='line' id='LC662'>of temporary memory smaller than the size of the CPU&#39;s level-1 cache. Even </div><div class='line' id='LC663'>computational algorithms which appear to require a large amount of memory, </div><div class='line' id='LC664'>can sometimes be broken down into sub-algorithms, in order to reduce the </div><div class='line' id='LC665'>required amount of temporary memory. While taking this approach does incur a </div><div class='line' id='LC666'>little load/store overhead, it&#39;s more important that your data stay in the </div><div class='line' id='LC667'>cache any way it can. These guidelines will pretty much guarantee that your </div><div class='line' id='LC668'>software will perform in the most efficient way on any CPU with an internal </div><div class='line' id='LC669'>cache.</div><div class='line' id='LC670'><br/></div><div class='line' id='LC671'><br/></div><div class='line' id='LC672'>The virtual frame buffer caveat</div><div class='line' id='LC673'>-------------------------------</div><div class='line' id='LC674'>Lets consider the virtual frame buffer (VFB) model. We start rendering our </div><div class='line' id='LC675'>playfield. Name tables and pattern tables are accessed, and that&#39;s fine (the </div><div class='line' id='LC676'>name tables are easily cached, and even some pattern table data gets </div><div class='line' id='LC677'>cached). Then, we store our rendered pixel data to our buffer. The pixel </div><div class='line' id='LC678'>data is stored to the VFB using a data size of 4 bytes (or otherwise, the </div><div class='line' id='LC679'>biggest size that the processor will allow the programmer to store with). </div><div class='line' id='LC680'>However, the CPU&#39;s cache line size is always bigger than this, and therefore </div><div class='line' id='LC681'>the CPU performs a merge operation with written data, and the cache line of </div><div class='line' id='LC682'>the data being written to.</div><div class='line' id='LC683'><br/></div><div class='line' id='LC684'>Now- here&#39;s the first problem: the target of the store operation to the VFB </div><div class='line' id='LC685'>is unlikely to be in the cache. This means that the CPU ends up actually </div><div class='line' id='LC686'>*reading* main memory after your first 4-byte pixel store. Of course, now </div><div class='line' id='LC687'>you can write to this line for free, but main memory access is slow, and </div><div class='line' id='LC688'>considering what we&#39;re doing here (which is exclusively store operations), </div><div class='line' id='LC689'>it&#39;s kind of ridiculous that the programmer has no way of telling the </div><div class='line' id='LC690'>processor that the merge operation (and moreover the reading of main memory) </div><div class='line' id='LC691'>is unneccessary, since we plan on overwriting all the original data in that </div><div class='line' id='LC692'>particular line (extensions to the MMX instructions introduced with the </div><div class='line' id='LC693'>Pentium 2 and later processors offer reasonable ways of dealing with </div><div class='line' id='LC694'>non-temporal storage).</div><div class='line' id='LC695'><br/></div><div class='line' id='LC696'>Anyway, you get the idea: after every few stores to the VFB occur, a new </div><div class='line' id='LC697'>line from the VFB will be read in from main memory (or, the level-2 cache, </div><div class='line' id='LC698'>if it&#39;s in there). But guess what? this isn&#39;t even the worst part of it. As </div><div class='line' id='LC699'>you keep filling the VFB, your CPU&#39;s cache overflows, since your CPU&#39;s L1 </div><div class='line' id='LC700'>cache is smaller than the VFB you&#39;re working on. This means that not only </div><div class='line' id='LC701'>will your VFB-rendering eventually push any lines out of the cache which </div><div class='line' id='LC702'>aren&#39;t used directly by the render routine (causing lost cycles for even </div><div class='line' id='LC703'>local routines that may need them immediately after the render), but after </div><div class='line' id='LC704'>the render when you go to copy the VFB to the video memory, the entire </div><div class='line' id='LC705'>buffer has to be loaded back into the CPU&#39;s cache.</div><div class='line' id='LC706'><br/></div><div class='line' id='LC707'>Of course, size of CPU cache is everything here. Due to the sequential </div><div class='line' id='LC708'>access patterns of the virtual frame buffer rendering model, this algorithm </div><div class='line' id='LC709'>may actually perform modestly on CPU&#39;s with large on-chip level-2 caches </div><div class='line' id='LC710'>(due to the speculative loading of data from the level-2 to the level-1 </div><div class='line' id='LC711'>cache). However, I can&#39;t say I know what the performance penalties may be </div><div class='line' id='LC712'>for running this algorithm on CPU&#39;s with external level-2 caches. So in </div><div class='line' id='LC713'>general, I would recommend against using the virtual frame buffer algorithm </div><div class='line' id='LC714'>model targetted for CPUs without an on-chip level-2 cache of at least 128KB.</div><div class='line' id='LC715'><br/></div><div class='line' id='LC716'><br/></div><div class='line' id='LC717'>Scanline stores</div><div class='line' id='LC718'>---------------</div><div class='line' id='LC719'>By reducing the size of the VFB from full size down to a few scanlines (or </div><div class='line' id='LC720'>even just one), most or all of the caveats of what has been mentioned can be </div><div class='line' id='LC721'>avoided. Since typically a VFB scanline is 256 bytes (in the example for the </div><div class='line' id='LC722'>NES&#39;s PPU), this makes the memory requirement small enough to ensure good </div><div class='line' id='LC723'>performance even on a 486.</div><div class='line' id='LC724'><br/></div><div class='line' id='LC725'>Of course, this creates a new problem for writing the PPU render engine- </div><div class='line' id='LC726'>tiles can no longer be rendered completely (unless you&#39;re using an </div><div class='line' id='LC727'>8-scanline VFB, but the rest of this topic assumes you&#39;re using only a </div><div class='line' id='LC728'>single scanline VFB). Some overhead caused by only rendering a single </div><div class='line' id='LC729'>scanline of a tile at a time can be avoided by pre-calculating pointer work </div><div class='line' id='LC730'>for each sequential tile, and storing it in an array, so that calculations </div><div class='line' id='LC731'>can be reused for the tile&#39;s other scanlines. A similar technique can be </div><div class='line' id='LC732'>done for object pointer calculations as well.</div><div class='line' id='LC733'><br/></div><div class='line' id='LC734'>Prehaps a possible performance boost obtainable through a careful scanline </div><div class='line' id='LC735'>rendering engine design, is that storing rendered playfield pixels directly </div><div class='line' id='LC736'>to the video buffer may be permitted, since all pixels on the playfield&#39;s </div><div class='line' id='LC737'>scanline can be rendered sequentially, and thus, can be stored out that way. </div><div class='line' id='LC738'>However, there are conditions that determine the effectiveness of this.</div><div class='line' id='LC739'><br/></div><div class='line' id='LC740'>First, dealing with object pixels which overlap areas of any playfield </div><div class='line' id='LC741'>scanline will be very difficult (without the use of at least a scanline </div><div class='line' id='LC742'>buffer), since the playfield tile rendering is usually performed </div><div class='line' id='LC743'>sequentially, while object tiles generally need to be rendererable at random </div><div class='line' id='LC744'>horizontal coordinates on the same scanline (in order to emulate object </div><div class='line' id='LC745'>priorities properly).</div><div class='line' id='LC746'><br/></div><div class='line' id='LC747'>The second condition depends on alignment. If the PPU&#39;s fine horizontal </div><div class='line' id='LC748'>scroll offset is evenly divisible by the size being used to store pixel data </div><div class='line' id='LC749'>to the frame buffer, then alignment isn&#39;t a problem. However, in the case </div><div class='line' id='LC750'>that it&#39;s not (and this will occur often, since almost all NES games use </div><div class='line' id='LC751'>smooth horizontal scrolling), then a method of shifting and merging pixels </div><div class='line' id='LC752'>in the CPU registers should be used to effectively perform the smooth </div><div class='line' id='LC753'>horizontal scrolling, in order to avoid a misaligned data store, and the </div><div class='line' id='LC754'>unforgivable penalty which is associated with performing this action </div><div class='line' id='LC755'>directly to the frame buffer.</div><div class='line' id='LC756'><br/></div><div class='line' id='LC757'><br/></div><div class='line' id='LC758'>Overcoming letterboxed displays</div><div class='line' id='LC759'>-------------------------------</div><div class='line' id='LC760'>Since the NES doesn&#39;t use any complex functions to generate it&#39;s graphics </div><div class='line' id='LC761'>(such as tilt, shift, twist, swivel, rotate, or scale), anti-aliasing has </div><div class='line' id='LC762'>never been important for pixel-perfect emulation of NES graphics. However, </div><div class='line' id='LC763'>due to the strange nature of VGA resolutions, to avoid ending up with a </div><div class='line' id='LC764'>letterboxed NES game screen display (that&#39;s one where there are large black </div><div class='line' id='LC765'>borders of unused screen area on the sides), you will either need to scale </div><div class='line' id='LC766'>the emulated graphics yourself, or find a way to get the video adaptor </div><div class='line' id='LC767'>hardware to do it.</div><div class='line' id='LC768'><br/></div><div class='line' id='LC769'>For scaling graphics intended to be displayed on a computer monitor, </div><div class='line' id='LC770'>anti-aliasing is super-important to ensure that only a minimum screen </div><div class='line' id='LC771'>resolution is required to ensure that artifacts (i.e., distorted or </div><div class='line' id='LC772'>asymmetric pixels) are as indistinguishable to gamers as possible. A ratio </div><div class='line' id='LC773'>of 5 destination to 2 source pixels can be used to stretch 256 source pixels </div><div class='line' id='LC774'>to 640 destination ones (a very common VGA horizontal resolution). For </div><div class='line' id='LC775'>calculating the color for the middle pixel of the 5, the two source color </div><div class='line' id='LC776'>values have to be averaged. Note that this requires pixels to be pure </div><div class='line' id='LC777'>RGB-values (as opposed to palette index values). Other VGA resolutions, such </div><div class='line' id='LC778'>as 512*384, may also provide some usefulness.</div><div class='line' id='LC779'><br/></div><div class='line' id='LC780'><br/></div><div class='line' id='LC781'>+-------------------------+</div><div class='line' id='LC782'>|Smooth audio reproduction|</div><div class='line' id='LC783'>+-------------------------+</div><div class='line' id='LC784'>This chapter describes ways to improve NES sound emulation.</div><div class='line' id='LC785'><br/></div><div class='line' id='LC786'><br/></div><div class='line' id='LC787'>overview</div><div class='line' id='LC788'>--------</div><div class='line' id='LC789'>Very few NES emulators out there emulate sound channel operations to the </div><div class='line' id='LC790'>precision that the NES does it at, and the result is that emulation of some </div><div class='line' id='LC791'>high-frequency rectangle and noise waves that many NES games produce on a </div><div class='line' id='LC792'>frequent basis, will end up sounding like there are artifacts in the audio </div><div class='line' id='LC793'>(i.e., two or more apparent frequencies present, even though only one </div><div class='line' id='LC794'>frequency is supposed to be heard). Increasing sample playback frequencies </div><div class='line' id='LC795'>can fix this problem, but in the end, sampling frequencies on sound cards </div><div class='line' id='LC796'>found in PC&#39;s and such can only go so high.</div><div class='line' id='LC797'><br/></div><div class='line' id='LC798'><br/></div><div class='line' id='LC799'>why are there artifacts in the high frequencies?</div><div class='line' id='LC800'>------------------------------------------------</div><div class='line' id='LC801'>The NES&#39;s sound generators each have an audio output update rate/resolution </div><div class='line' id='LC802'>of 1.79 million samples per second (approx). Compared to the average sound </div><div class='line' id='LC803'>blaster payback rate (44100 Hz), this means that the NES&#39;s sound channels </div><div class='line' id='LC804'>have 3125/77, or 40 and 45/77ths times the sample resolution. So, when just </div><div class='line' id='LC805'>one calculated PCM sample needs to represent 40.6 from the NES&#39;s sound </div><div class='line' id='LC806'>channels (in the same timeframe), it&#39;s no wonder the audio sounds so </div><div class='line' id='LC807'>terrible at high frequencies: approximately 39.6 source audio samples have </div><div class='line' id='LC808'>been skipped over, and assumed to be all equal to the single sample.</div><div class='line' id='LC809'><br/></div><div class='line' id='LC810'><br/></div><div class='line' id='LC811'>solutions</div><div class='line' id='LC812'>---------</div><div class='line' id='LC813'>Sound blasters have hardware in place to overcome this transparently from </div><div class='line' id='LC814'>the user, whenever audio signal digital capture is desired. The proof is in </div><div class='line' id='LC815'>sampling NES music at 44100 Hz, 16 bits/sample: there is no distinguishable </div><div class='line' id='LC816'>difference between how the real-time generated analog audio from the NES </div><div class='line' id='LC817'>sounds when compared to the digitally captured sample track. They&#39;re either </div><div class='line' id='LC818'>using primitive RC integrator function circuits on the inputs of it&#39;s ADCs </div><div class='line' id='LC819'>to approximate a time-accumulated average voltage between ADC samples, or </div><div class='line' id='LC820'>they are sampling the signal many times faster than the output PCM sample </div><div class='line' id='LC821'>rate (some 2^n multiple), and using digital averaging hardware to produce </div><div class='line' id='LC822'>each &quot;downsampled&quot; PCM result. Here&#39;s more, courtesy of an NESdev veteran:</div><div class='line' id='LC823'><br/></div><div class='line' id='LC824'>&quot;What I&#39;m suggesting is that you do the above at a high sampling rate, some </div><div class='line' id='LC825'>power-of-2 multiple of the output rate, for example, 4*44100 = 176400 </div><div class='line' id='LC826'>samples per second.  You would add every four samples together, and divide </div><div class='line' id='LC827'>by four (downsample), and that would be your output sample.</div><div class='line' id='LC828'><br/></div><div class='line' id='LC829'>Suppose your wave amplitude is 1.  Here are some examples of generating a </div><div class='line' id='LC830'>single output sample:</div><div class='line' id='LC831'><br/></div><div class='line' id='LC832'>EXAMPLE 1</div><div class='line' id='LC833'>Oversample Results: 1, 1, 1, 1</div><div class='line' id='LC834'>Downsampled Output: (1 + 1 + 1 + 1) / 4 = 4 / 4 = 1</div><div class='line' id='LC835'><br/></div><div class='line' id='LC836'>EXAMPLE 2</div><div class='line' id='LC837'>Oversample Results: 1, 1, -1, -1</div><div class='line' id='LC838'>Downsampled Output: (1 + 1 + -1 + -1) / 4 = 0 / 4 = 0</div><div class='line' id='LC839'><br/></div><div class='line' id='LC840'>EXAMPLE 3</div><div class='line' id='LC841'>Oversample Results: 1, -1, 1, 1</div><div class='line' id='LC842'>Downsampled Output: (1 + -1 + 1 + 1) / 4 = 3 / 4 = 0.75</div><div class='line' id='LC843'><br/></div><div class='line' id='LC844'>So your output samples will not always be a simple 1 or -1. You&#39;re really </div><div class='line' id='LC845'>raising the sampling rate, and then converting the results back to the </div><div class='line' id='LC846'>output sampling rate.&quot;</div><div class='line' id='LC847'><br/></div><div class='line' id='LC848'><br/></div><div class='line' id='LC849'>simple rectangle channel implementation</div><div class='line' id='LC850'>---------------------------------------</div><div class='line' id='LC851'>Simple sound channels like rectangle wave can be designed to approximate the </div><div class='line' id='LC852'>accurate output of the channel without having to resort to any downsampling </div><div class='line' id='LC853'>techniques.</div><div class='line' id='LC854'><br/></div><div class='line' id='LC855'>- Use a whole-numerator-based wavelength counter to decrement by 40 and </div><div class='line' id='LC856'>45/77 after every PCM sample is rendered; this simulates the elapsed time in </div><div class='line' id='LC857'>regular 6502 CPU clock cycles that passes between PCM samples being played </div><div class='line' id='LC858'>back at 44100 Hz.</div><div class='line' id='LC859'><br/></div><div class='line' id='LC860'>- When the wavelength.whole counter goes negative (count expires), this not </div><div class='line' id='LC861'>only means that the rectangle wave output has toggled somewhere in the </div><div class='line' id='LC862'>middle of the PCM sample timeframe, but also that volume output will scale </div><div class='line' id='LC863'>based on how many cycles the channel output was positive during the PCM </div><div class='line' id='LC864'>sample timeframe. To calculate this, the leftover value in the wavelength </div><div class='line' id='LC865'>counter can be used.</div><div class='line' id='LC866'><br/></div><div class='line' id='LC867'>- If the leftover wavelength value represents the wave while positive, then </div><div class='line' id='LC868'>the wavelength.whole value can be negated; otherwise, add 40 and 45/77ths to </div><div class='line' id='LC869'>it.</div><div class='line' id='LC870'><br/></div><div class='line' id='LC871'>- To calculate the final PCM output sample, simply scale the channel&#39;s </div><div class='line' id='LC872'>volume level by the ratio between the adjusted wavelength counter, and 40 </div><div class='line' id='LC873'>and 45/77ths.</div><div class='line' id='LC874'><br/></div><div class='line' id='LC875'>- Caveat: output rectangle waveforms may not change state more than once per </div><div class='line' id='LC876'>produced PCM sample, and this makes accurate emulation of wavelengths less </div><div class='line' id='LC877'>than 40 and 45/77 clock cycles not directly possible with this algorithm. </div><div class='line' id='LC878'>However, wavelengths that go below this value may be raised from here by the </div><div class='line' id='LC879'>absolute difference of the two values, to produce an output wave pattern </div><div class='line' id='LC880'>similar to the actual one that would be produced. Generally though, these </div><div class='line' id='LC881'>frequencies cannot be heard by humans, and therefore accurate implementation </div><div class='line' id='LC882'>is not as important, if neccessary at all.</div><div class='line' id='LC883'><br/></div><div class='line' id='LC884'><br/></div><div class='line' id='LC885'>other notes</div><div class='line' id='LC886'>-----------</div><div class='line' id='LC887'>- Always represent non-integer-based counters (like ones that have to </div><div class='line' id='LC888'>increment by numbers like 40 and 45/77ths) with rational </div><div class='line' id='LC889'>whole-numerator-denominator grouped integers, rather than using floating </div><div class='line' id='LC890'>point numbers to represnt the ratio. While floating point numbers can be </div><div class='line' id='LC891'>very precise, due to how rational number bit patterns repeat forever, </div><div class='line' id='LC892'>calculations are never 100% guaranteed accurate, and this makes successive </div><div class='line' id='LC893'>calculations based on calculated data a bad idea. However, whole-numerator </div><div class='line' id='LC894'>counters can be incremented with integer delta values to guarantee no </div><div class='line' id='LC895'>arithimetic calculation accuracy loss. Finally, these actions should be </div><div class='line' id='LC896'>carried out if the numerator becomes numerically greater than the </div><div class='line' id='LC897'>denominator after an increment operation:</div><div class='line' id='LC898'>* decrement the numerator count value by the denominator.</div><div class='line' id='LC899'>* increment the whole number counter.</div><div class='line' id='LC900'><br/></div><div class='line' id='LC901'>- Make sure you use cycle count information passed to sound hardware </div><div class='line' id='LC902'>emulation routines from the CPU core to effect sound channel outputs at </div><div class='line' id='LC903'>correct times in the emulated frame. That means that sound channel operation </div><div class='line' id='LC904'>updates should *not* be on a per-frame basis, even though this technique </div><div class='line' id='LC905'>works for the majority of NES game music code. Many writes to sound channel </div><div class='line' id='LC906'>registers are effective almost immediately after the write, and apparently, </div><div class='line' id='LC907'>some NES games actually take advantage of timed sound port code to produce </div><div class='line' id='LC908'>some really neat sounding effects. Also, for emulators that support more </div><div class='line' id='LC909'>than the regular amount of 6502 clock cycles per frame, sound hardware </div><div class='line' id='LC910'>should ignore any clock cycles greater than 29780 and 2/3rds, relative to </div><div class='line' id='LC911'>when the game&#39;s main sound animation routine was last triggered (assuming </div><div class='line' id='LC912'>that PPU-based NMIs are used for sound animation, but sometimes the 2A03&#39;s </div><div class='line' id='LC913'>frame counter is used for this).</div><div class='line' id='LC914'><br/></div><div class='line' id='LC915'><br/></div><div class='line' id='LC916'>+------------------------------------------------+</div><div class='line' id='LC917'>|6502 instruction decoding &amp; execution techniques|</div><div class='line' id='LC918'>+------------------------------------------------+</div><div class='line' id='LC919'>- Instruction component-based emulation. This core model breaks all 6502 </div><div class='line' id='LC920'>opcodes down into just two components: addressing mode, and ALU operation. </div><div class='line' id='LC921'>Since addressing modes and ALU operations are combined to make all 6502 </div><div class='line' id='LC922'>opcodes, it seems to make sense to emulate 6502 opcodes on this basis. As a </div><div class='line' id='LC923'>result, only essential 6502 core routines will need to be coded, and this </div><div class='line' id='LC924'>will not only save big on code memory, it will make implementation easier. </div><div class='line' id='LC925'>Also, this technique is only slightly slower than the opcode-handled </div><div class='line' id='LC926'>approach, due to the extra jump in the instruction decoding process, but </div><div class='line' id='LC927'>this is made up for in the host CPU&#39;s cache performance, due to more </div><div class='line' id='LC928'>efficient use of code structures. In general, this technique will yield the </div><div class='line' id='LC929'>best well-rounded performance for any PC platform.</div><div class='line' id='LC930'><br/></div><div class='line' id='LC931'>- Instruction-based 6502 opcode interpretation. In this CPU core model, </div><div class='line' id='LC932'>fetched 6502 opcodes are used as an index into a 256-element jump table, </div><div class='line' id='LC933'>where each jump target points to an inlined routine that handles all the </div><div class='line' id='LC934'>6502 actions to mimic for that instruction. This CPU model is the most </div><div class='line' id='LC935'>popular, as it&#39;s the easiest to implement, and can actually be reasonably </div><div class='line' id='LC936'>fast, depending on how well the opcode handlers are written (inlining </div><div class='line' id='LC937'>subroutines and unrolling any loops contained under opcode handlers will be </div><div class='line' id='LC938'>important for speedy emulation). The only real drawback of this technique is </div><div class='line' id='LC939'>that it doesn&#39;t make very optimal use of memory storage area, as many code </div><div class='line' id='LC940'>sequences under opcode handlers will have to be duplicated dozens of times. </div><div class='line' id='LC941'>This will cause somewhat of a performance penalty on those CPU&#39;s with </div><div class='line' id='LC942'>smaller (16KB or less) L1 code caches.</div><div class='line' id='LC943'><br/></div><div class='line' id='LC944'>- Dynamic 6502 opcode recompiliation. In this CPU core model, 6502 opcodes </div><div class='line' id='LC945'>are decoded, but instead of emulating the behaviour of the CPU with </div><div class='line' id='LC946'>subroutines, platform-specific CPU machine code based on the decoded </div><div class='line' id='LC947'>instruction is generated and executed to do that instead. Eventually all </div><div class='line' id='LC948'>6502 opcodes will be translated &amp; cached in the emulator&#39;s memory map, </div><div class='line' id='LC949'>provided adequate processing time is given to the core to trample through </div><div class='line' id='LC950'>all the 6502 code it may ever execute. The throughput of executing </div><div class='line' id='LC951'>recompiled 6502 instructions can actually be higher than doing so on a real </div><div class='line' id='LC952'>6502 itself, provided the programmer does a good job of implementing </div><div class='line' id='LC953'>optimizations in the recompiled instructions (i.e., the requirement of </div><div class='line' id='LC954'>including flag maintenence code for most recompiled instructions is not </div><div class='line' id='LC955'>neccessary, since only branch and add/subtract instructions rely on them. </div><div class='line' id='LC956'>Another optimization may be possible through the use of clock cycle tables </div><div class='line' id='LC957'>for 6502 code segments (code that&#39;s defined between branch targets or PC </div><div class='line' id='LC958'>xfer instructions), in order to eliminate clock cycle maintenence </div><div class='line' id='LC959'>instructcions in some of the recompiled code as well). Caveats of this CPU </div><div class='line' id='LC960'>core model (besides very complicated implementation of the architecture), </div><div class='line' id='LC961'>include the requirement for large amounts of RAM (a few or more megabytes), </div><div class='line' id='LC962'>and other complexities that arise when a 6502 program frequently modifies </div><div class='line' id='LC963'>it&#39;s own code (stored in RAM) which has already been translated &amp; cached by </div><div class='line' id='LC964'>the CPU engine. For multitasking dozens, even hundreds of NES applications </div><div class='line' id='LC965'>on a single, state of the art computer however, dynamic recompiliation is </div><div class='line' id='LC966'>the only way to go.</div><div class='line' id='LC967'><br/></div><div class='line' id='LC968'>- Microcode-based 6502 opcode interpretation. In this CPU core model, when a </div><div class='line' id='LC969'>6502 opcode is fetched, the byte is used as an index into a 256-element </div><div class='line' id='LC970'>table containing a short list of subroutine pointers for each element, that </div><div class='line' id='LC971'>represent the actions that the 6502 engine will take on each clock cycle </div><div class='line' id='LC972'>that the opcode instruction executes for. These microcode sequences are </div><div class='line' id='LC973'>reused across different opcodes in different combinations, in order to form </div><div class='line' id='LC974'>the actions that a single opcode performs. There is alot less microcode </div><div class='line' id='LC975'>instructions to deal with than there is opcode instructions, and this </div><div class='line' id='LC976'>reduces core complexity. By revolving events that occur in your 6502 core </div><div class='line' id='LC977'>around a microcode table, you can make it possible for a new 6502 </div><div class='line' id='LC978'>instruction (i.e., an old &quot;jam&quot; one) to modify the table, so that future NES </div><div class='line' id='LC979'>applications may be allowed to program in their own custom, more useful and </div><div class='line' id='LC980'>efficient 6502 instructions, in order to improve the speed &amp; quality of an </div><div class='line' id='LC981'>NES game. Because of the clock-cycle granular execution, this emulator model </div><div class='line' id='LC982'>is more object-oriented than any other, and provides the closest possible </div><div class='line' id='LC983'>simulation of the events that occur in a real 6502 (this includes simple and </div><div class='line' id='LC984'>logical implementation of all dead 6502 instruction cycles). In terms of </div><div class='line' id='LC985'>average emulation speed however, this technique falls very short of others.</div><div class='line' id='LC986'><br/></div><div class='line' id='LC987'><br/></div><div class='line' id='LC988'>Other tips</div><div class='line' id='LC989'>----------</div><div class='line' id='LC990'>- Some NES games rely on the extra dummy store cycle that RMW instructions </div><div class='line' id='LC991'>perform on a 6502. This is usually done to pulse a bit in the mapper port, </div><div class='line' id='LC992'>with a single RMW instruction. Other 6502 &quot;features&quot; (even undocumented </div><div class='line' id='LC993'>opcodes) may also be assumed to be implemented in the host CPU for an NES </div><div class='line' id='LC994'>game (or sometimes game genie codes/patches), so don&#39;t skip over any details </div><div class='line' id='LC995'>during your implementation of a core. For more info, check out the &quot;2A03 </div><div class='line' id='LC996'>technical reference&quot; document.</div><div class='line' id='LC997'><br/></div><div class='line' id='LC998'>- Implement a clock cycle counter into your 6502 engine, which will be </div><div class='line' id='LC999'>maintained by every 6502 instruction executed. This counter will mainly be </div><div class='line' id='LC1000'>used by the PPU to figure out how timed writes will effect how the output </div><div class='line' id='LC1001'>image will be rendered. However, if used also as a terminal counter, when </div><div class='line' id='LC1002'>the count expires, program control can be transferred to the handler </div><div class='line' id='LC1003'>originally requesting the count operation (like for generating the PPU </div><div class='line' id='LC1004'>VINT/NMI signal). Also, don&#39;t forget that you can manage any number of </div><div class='line' id='LC1005'>&quot;virtual cycle counters&quot;, without ever having to make the CPU core maintain </div><div class='line' id='LC1006'>more than one physical one. NES hardware may have several IRQ-generating </div><div class='line' id='LC1007'>counters going simultaniously, but the order in which each will cause an IRQ </div><div class='line' id='LC1008'>is always known to the emulator, which is why the cycle count register only </div><div class='line' id='LC1009'>has to be programmed with the count value for the next IRQ to occur (after </div><div class='line' id='LC1010'>which, the next count to expire can be loaded into the cycle count </div><div class='line' id='LC1011'>register).</div><div class='line' id='LC1012'><br/></div><div class='line' id='LC1013'>- As 6502 instructions usually require the P (processor status, or flags) </div><div class='line' id='LC1014'>register to be updated after an ALU operation, the x86&#39;s (or otherwise, </div><div class='line' id='LC1015'>another platform-dependent CPU) ALU instructions updates it&#39;s flags register </div><div class='line' id='LC1016'>in a similar mannar. Therefore, after emulating the ALU behaviour of a 6502 </div><div class='line' id='LC1017'>instruction with an x86 one, use instructions like &quot;LAHF&quot; or &quot;SETcc&quot; to </div><div class='line' id='LC1018'>acquire the status of sign, zero, carry, and overflow condition codes. </div><div class='line' id='LC1019'>Furthermore, have your emulator store the 6502 flags in the format that </div><div class='line' id='LC1020'>they&#39;re stored in on the x86 CPU. This way, the flags do not have to be </div><div class='line' id='LC1021'>formatted, thus saving time. The only time the flags will have to be </div><div class='line' id='LC1022'>converted to/from the 6502 order, is when 6502 instructions PHP, PLP, BRK </div><div class='line' id='LC1023'>#xx, RTS, and hardware interrupts are executed. Since these happen much less </div><div class='line' id='LC1024'>often than more common arithmetic and logical instructions, it&#39;s more </div><div class='line' id='LC1025'>efficient to handle the flags in this way.</div><div class='line' id='LC1026'><br/></div><div class='line' id='LC1027'>- use platform-specific CPU registers to store some commonly-accessed 6502 </div><div class='line' id='LC1028'>pointer registers in if possible, as this reduces load/store dependencies, </div><div class='line' id='LC1029'>and address generation interlocks (AGIs) in emulation software code. This </div><div class='line' id='LC1030'>basically includes the PC, S, X, Y, and TMPADDR 6502 internal registers.</div><div class='line' id='LC1031'><br/></div><div class='line' id='LC1032'>- the 6502 apparently has about 12 opcodes which jam the machine </div><div class='line' id='LC1033'>(processor). These opcodes are ideal for implementing emulator-specific </div><div class='line' id='LC1034'>custom 6502 instruction set extentions for trap/debug purposes.</div><div class='line' id='LC1035'><br/></div><div class='line' id='LC1036'><br/></div><div class='line' id='LC1037'>+--------------------------+</div><div class='line' id='LC1038'>|Emulation address decoding|</div><div class='line' id='LC1039'>+--------------------------+</div><div class='line' id='LC1040'>Emulation address decoding is taking a formed 6502 address, plus the 6502&#39;s </div><div class='line' id='LC1041'>read/write status, and running it through (most the time) static logic to </div><div class='line' id='LC1042'>determine the access method, and the emulator-equivelant memory address that </div><div class='line' id='LC1043'>this 6502 address corresponds to, in order to emulate access to that memory </div><div class='line' id='LC1044'>location properly. With this approach, these decoded addresses in your </div><div class='line' id='LC1045'>emulator can be treated as either a direct pointer to the data, or as a </div><div class='line' id='LC1046'>pointer to a subroutine that the CPU core calls when additional code </div><div class='line' id='LC1047'>neccessary to accurately emulate the events of that 6502 clock cycle. The </div><div class='line' id='LC1048'>best-known technique for doing this is discussed as follows.</div><div class='line' id='LC1049'><br/></div><div class='line' id='LC1050'>Using a 1:1 address decode look-up tables for both read &amp; write 6502 memory </div><div class='line' id='LC1051'>maps is the fastest and most accurate way to determine where an NES memory </div><div class='line' id='LC1052'>area is, and what address it maps to. Generally, a byte should be used as a </div><div class='line' id='LC1053'>single element in the memory maps to represent the type of mem area (up to </div><div class='line' id='LC1054'>256 types for each table), and you&#39;ll have 128KB of them, since the 6502&#39;s </div><div class='line' id='LC1055'>R/W line is also used during address calculations. Even though this </div><div class='line' id='LC1056'>technique _seems_ to waste a lot of memory, the memory decode tables are </div><div class='line' id='LC1057'>most commonly accessed in parallel with memory areas containing NES ROM and </div><div class='line' id='LC1058'>RAM structures, and this means that cached data structures residing in the </div><div class='line' id='LC1059'>emu&#39;s host CPU (due to simulated 6502 memory bus transfers) will usually </div><div class='line' id='LC1060'>never require more than twice the amount as normal. This is a small price to </div><div class='line' id='LC1061'>pay to ensure that adapting your 6502 core engine to any foreign NES/FC </div><div class='line' id='LC1062'>architecture/technology, is as easy as adding a few new memory area type </div><div class='line' id='LC1063'>handlers to your emulator&#39;s core, and then building a new address decoder </div><div class='line' id='LC1064'>table.</div><div class='line' id='LC1065'><br/></div><div class='line' id='LC1066'><br/></div><div class='line' id='LC1067'>+----------------------+</div><div class='line' id='LC1068'>|Hardware port queueing|</div><div class='line' id='LC1069'>+----------------------+</div><div class='line' id='LC1070'>Hardware port queueing allows the CPU to write out (and sometimes even read </div><div class='line' id='LC1071'>in) data targetted at a hardware port in the virtual 6502&#39;s memory map, </div><div class='line' id='LC1072'>without having to break CPU emulation to call a hardware port emulation </div><div class='line' id='LC1073'>routine/handler. This is possible through buffering writes out to the </div><div class='line' id='LC1074'>particular port, so that a hardware emulation routine may process the data </div><div class='line' id='LC1075'>later on (i.e., out-of-order from the one the CPU core issues it in).</div><div class='line' id='LC1076'><br/></div><div class='line' id='LC1077'>pros</div><div class='line' id='LC1078'>----</div><div class='line' id='LC1079'>- program control transfers are evaded when common hardware ports are </div><div class='line' id='LC1080'>accessed by the CPU core. This in turn reduces code &amp; data cache misses, and </div><div class='line' id='LC1081'>espically branch mispredicts, in the physical CPU running the emulation </div><div class='line' id='LC1082'>software.</div><div class='line' id='LC1083'><br/></div><div class='line' id='LC1084'>- dynamically adding hardware devices to the CPU core&#39;s virtual memory map </div><div class='line' id='LC1085'>will be easier, due to the architectural enhancements that hardware port </div><div class='line' id='LC1086'>queueing requires the CPU core to support.</div><div class='line' id='LC1087'><br/></div><div class='line' id='LC1088'>- less code will be produced in the emulator software&#39;s image file, due to </div><div class='line' id='LC1089'>there being less hardware port emulation handlers present.</div><div class='line' id='LC1090'><br/></div><div class='line' id='LC1091'>- large overhead penalties that are incurred when hardware emulation routine </div><div class='line' id='LC1092'>loops (like for rendering pixels, creating audio samples, etc...) have to be </div><div class='line' id='LC1093'>broken (due to the CPU core writing out to the hardware handler at that </div><div class='line' id='LC1094'>moment in the simulated frame), can be avoided. This is important for 2 </div><div class='line' id='LC1095'>reasons:</div><div class='line' id='LC1096'><br/></div><div class='line' id='LC1097'>1. your NES emulator core engines can now be designed to operate in one big </div><div class='line' id='LC1098'>loop, without having to worry about intervention from other hardware devices </div><div class='line' id='LC1099'>during the same virtual NES emulation time, unless it&#39;s absolutely </div><div class='line' id='LC1100'>necessary. This means that say, the PPU engine can render a complete frame </div><div class='line' id='LC1101'>at any instant (as opposed to having to depend on data sent to the PPU </div><div class='line' id='LC1102'>engine in real-time via the CPU core), thanks to hardware port queueing.</div><div class='line' id='LC1103'><br/></div><div class='line' id='LC1104'>2. no matter how your NES-written 6502 code abuses the PPU, APU, MMC, etc. </div><div class='line' id='LC1105'>hardware in the NES, your core engines of all these devices can all now be </div><div class='line' id='LC1106'>designed to use a nearly constant amount of CPU clock cycles on the physical </div><div class='line' id='LC1107'>processor running your emulator&#39;s software, thanks to the simple loop design </div><div class='line' id='LC1108'>of emulator core devices, in combination with branchless code solutions to </div><div class='line' id='LC1109'>if/else constructs and the like.</div><div class='line' id='LC1110'><br/></div><div class='line' id='LC1111'><br/></div><div class='line' id='LC1112'>cons</div><div class='line' id='LC1113'>----</div><div class='line' id='LC1114'>- uses some extra data structures/memory</div><div class='line' id='LC1115'><br/></div><div class='line' id='LC1116'>- more difficult to implement than standard real-time handler-based approach</div><div class='line' id='LC1117'><br/></div><div class='line' id='LC1118'><br/></div><div class='line' id='LC1119'>overview</div><div class='line' id='LC1120'>--------</div><div class='line' id='LC1121'>The hardware port queueing concept is only benificial for those hardware </div><div class='line' id='LC1122'>devices that do not interact with (i.e., change or effect the operation of) </div><div class='line' id='LC1123'>the CPU core, outside of readable ports like $2002. So, for example, you </div><div class='line' id='LC1124'>wouldn&#39;t want to buffer writes to the cart mapper hardware if it&#39;s effecting </div><div class='line' id='LC1125'>a PRG-bank (due to the fact that the write is supposed to effect CPU </div><div class='line' id='LC1126'>emulation immediately), but the opposite is true for CHR-bank changes. So, </div><div class='line' id='LC1127'>this is essentially the criteria that you must base your decisions on, when </div><div class='line' id='LC1128'>deciding which hardware ports should be queued.</div><div class='line' id='LC1129'><br/></div><div class='line' id='LC1130'>Hardware devices that generate interrupts on the CPU are a little easier to </div><div class='line' id='LC1131'>deal with, since interrupt sources almost always come from some sort of </div><div class='line' id='LC1132'>on-going counter in the NES (the MMC3&#39;s scanline counter, is a slight </div><div class='line' id='LC1133'>exception, since it relies on the clocking of A13 on the virtual PPU). </div><div class='line' id='LC1134'>Execution of the events that are to occur on the terminal count clock cycle </div><div class='line' id='LC1135'>can be queued to the CPU by creating an instance of a virtual cycle counter </div><div class='line' id='LC1136'>by the hardware emulation routine that needs it.</div><div class='line' id='LC1137'><br/></div><div class='line' id='LC1138'><br/></div><div class='line' id='LC1139'>implementation</div><div class='line' id='LC1140'>--------------</div><div class='line' id='LC1141'>The &quot;port queueing&quot; idea really revolves around assigning back &amp; forward </div><div class='line' id='LC1142'>pointers to _all_ hardware-related (PPU, in this example) memory addresses </div><div class='line' id='LC1143'>that can be modified by the CPU. These pointers then link into a 1+2 way </div><div class='line' id='LC1144'>list that represents the queued data for that memory address. This means a </div><div class='line' id='LC1145'>pair of pointers for:</div><div class='line' id='LC1146'><br/></div><div class='line' id='LC1147'>- each standard PPU registers (2000-2007, though you might not need to do </div><div class='line' id='LC1148'>all of them (keep reading...))</div><div class='line' id='LC1149'>- each palette memory element</div><div class='line' id='LC1150'>- each OAM element</div><div class='line' id='LC1151'>- each name table element*</div><div class='line' id='LC1152'>- each patten table element</div><div class='line' id='LC1153'>- any bankswitching regs</div><div class='line' id='LC1154'>- each element in CHR-RAM, if it exists*</div><div class='line' id='LC1155'>- etc...</div><div class='line' id='LC1156'><br/></div><div class='line' id='LC1157'>(* only physical addresses need to be considered here, since any </div><div class='line' id='LC1158'>bankswitches will be queued.)</div><div class='line' id='LC1159'><br/></div><div class='line' id='LC1160'>When the CPU core decodes writes to ports like $4014, the CPU core will </div><div class='line' id='LC1161'>examine that port&#39;s status as a queued port, along with the pointer to the </div><div class='line' id='LC1162'>last allocated link in the list of queued writes for that port will be </div><div class='line' id='LC1163'>decoded. If queueing is enabled for this port, the CPU will use the pointer </div><div class='line' id='LC1164'>info, along with memory allocation info and the current cycle count, to </div><div class='line' id='LC1165'>insert a new link into that list, containing the CPU write data.</div><div class='line' id='LC1166'><br/></div><div class='line' id='LC1167'><br/></div><div class='line' id='LC1168'>attributes of a list element</div><div class='line' id='LC1169'>----------------------------</div><div class='line' id='LC1170'>- CPU clock cycle this write occured on, relative to last write</div><div class='line' id='LC1171'>- next allocated link for this list</div><div class='line' id='LC1172'>- last allocated link for this list</div><div class='line' id='LC1173'>- frame ptr link</div><div class='line' id='LC1174'>- data</div><div class='line' id='LC1175'><br/></div><div class='line' id='LC1176'>A relative clock cycle tag value allows hardware emulation routines reading </div><div class='line' id='LC1177'>the value later on to determine when the next related write to this port </div><div class='line' id='LC1178'>occurs.</div><div class='line' id='LC1179'><br/></div><div class='line' id='LC1180'>Fwd/back pointers are used in each element in the list for 2-way travel. </div><div class='line' id='LC1181'>This is required, since it is often neccessary for the hardware to know the </div><div class='line' id='LC1182'>last-known value of any memory it may have access to.</div><div class='line' id='LC1183'><br/></div><div class='line' id='LC1184'>A third, one-way pointer in each element in the list will be used to link </div><div class='line' id='LC1185'>all nodes created from the same core engine in your emulator together. This </div><div class='line' id='LC1186'>makes deallocation of all those links very easy, with list length being a </div><div class='line' id='LC1187'>direct function of the number of hardware writes that occured that frame </div><div class='line' id='LC1188'>(so, generally not that much). Note that links with the &quot;last allocated </div><div class='line' id='LC1189'>link&quot; field = 0 are *not* to be deallocated, since these represent links </div><div class='line' id='LC1190'>that must be present for the next frame&#39;s calculations.</div><div class='line' id='LC1191'><br/></div><div class='line' id='LC1192'>For writing to ports like $2004 and $2007, which are designed to have data </div><div class='line' id='LC1193'>streamed into it, this will require some additional logic on the CPU core&#39;s </div><div class='line' id='LC1194'>part to calculate the link list address (since there&#39;s an additional lookup, </div><div class='line' id='LC1195'>and an address increment required). This would normally be done with a </div><div class='line' id='LC1196'>hardware port handler, but this approach would be frowned upon, since the </div><div class='line' id='LC1197'>whole point of implementing hardware port queueing is to avoid transfering </div><div class='line' id='LC1198'>emulation program control out of the CPU core into other modules, unless </div><div class='line' id='LC1199'>absolutely neccessary.</div><div class='line' id='LC1200'><br/></div><div class='line' id='LC1201'>For handling CPU reads from hardware ports, it&#39;s a simple matter of </div><div class='line' id='LC1202'>determining whether or not the port handler has to be called or not. For </div><div class='line' id='LC1203'>example, when $2002 is read, it&#39;s status often doesn&#39;t change until a </div><div class='line' id='LC1204'>certain (independent) clock cycle in the frame has been reached. In this </div><div class='line' id='LC1205'>case, the port would be read for the first time, and the handler would be </div><div class='line' id='LC1206'>invoked. The handler would then calculate the next clock cycle at which </div><div class='line' id='LC1207'>$2002&#39;s status is expected to change, and creates a virtual cycle counter </div><div class='line' id='LC1208'>instance, programmed to execute another $2002-related handler when the cycle </div><div class='line' id='LC1209'>count expires. Meanwhile, the handler changes the CPU memory map layout so </div><div class='line' id='LC1210'>that subsequent reads from this port simply causes the CPU core to read from </div><div class='line' id='LC1211'>a regular memory address, where the last known port value is stored, thus </div><div class='line' id='LC1212'>avoiding unneccessary calling of $2002&#39;s read handler, until the virtual </div><div class='line' id='LC1213'>counter goes off.</div><div class='line' id='LC1214'><br/></div><div class='line' id='LC1215'>For handling CPU reads from ports like $2004 and $2007, the CPU core simply </div><div class='line' id='LC1216'>has to return the last-known value of the element being accessed from the </div><div class='line' id='LC1217'>array queues.</div><div class='line' id='LC1218'><br/></div><div class='line' id='LC1219'><br/></div><div class='line' id='LC1220'>+--------------------------+</div><div class='line' id='LC1221'>|Threading NES applications|</div><div class='line' id='LC1222'>+--------------------------+</div><div class='line' id='LC1223'>Lately, x86-based PC&#39;s have become so blazingly fast, that emulating just </div><div class='line' id='LC1224'>one virtual NES on a modern PC, would seem to be a waste of processing </div><div class='line' id='LC1225'>power. With that said, modern PC&#39;s have enough processing power to emulate </div><div class='line' id='LC1226'>dozens of virtual NES machines, but there is one big problem with </div><div class='line' id='LC1227'>multitasking NES applications: they were never designed to be threaded. </div><div class='line' id='LC1228'>Instead, an entire frame&#39;s worth of NES CPU clocks have to be wasted for </div><div class='line' id='LC1229'>each NES application, in order to consider the application&#39;s frame </div><div class='line' id='LC1230'>calculations complete, whether or not this may be true (and if not, a </div><div class='line' id='LC1231'>slowdown will occur). The following hints and tips suggest ways to reduce </div><div class='line' id='LC1232'>wasted time in virtual 6502 emulation normally lost due to spin-wait, poll, </div><div class='line' id='LC1233'>or cycle count loops.</div><div class='line' id='LC1234'><br/></div><div class='line' id='LC1235'>- Interrupt routine thread tracking. All interrupt routines can be threaded </div><div class='line' id='LC1236'>regardless of whether or not a proper RTI instruction is executed at the end </div><div class='line' id='LC1237'>of the handler. By trapping access to the PC address value saved on the </div><div class='line' id='LC1238'>stack from the executing interrupt, a handler could gain control the next </div><div class='line' id='LC1239'>moment that the old PC address address is accessed again, which will be most </div><div class='line' id='LC1240'>likely when the interrupt routine is done. There is an exception to this: </div><div class='line' id='LC1241'>games that only set flags in the interrupt handler, and then return. In this </div><div class='line' id='LC1242'>case, the thread will be short, which is why access to the saved PC address </div><div class='line' id='LC1243'>should be accessed twice, before an interrupt-based thread should be </div><div class='line' id='LC1244'>considered finished.</div><div class='line' id='LC1245'><br/></div><div class='line' id='LC1246'>- For ports frequently used in polling loops (like $2002), these handlers </div><div class='line' id='LC1247'>can do a basic poll loop comparison to the current location of the PC, to </div><div class='line' id='LC1248'>determine if the port is being polled, and the condition under which the </div><div class='line' id='LC1249'>loop will be exited. Since flags like vblank, &gt;8sprites, and priobjcollision </div><div class='line' id='LC1250'>all happen at a static moment in an emulated frame, it&#39;s easy to make the </div><div class='line' id='LC1251'>PPU handler advance the CPU&#39;s cycle counter directly to the clock cycle at </div><div class='line' id='LC1252'>which these flags will meet the loop exit condition, and thus saving virtual </div><div class='line' id='LC1253'>6502 CPU time.</div><div class='line' id='LC1254'><br/></div><div class='line' id='LC1255'>- Writes to NES hardware conditioning their on-going operation, which have </div><div class='line' id='LC1256'>not been preceeded by an interrupt event or a polled port, can be assumed to </div><div class='line' id='LC1257'>be timed by cycle counting code. In this case, if an algorithm can detect </div><div class='line' id='LC1258'>the presence of a simple cycle counting loop, tens of thousands of host CPU </div><div class='line' id='LC1259'>clocks per frame can be saved by replacing this type of 6502 loop, with </div><div class='line' id='LC1260'>special 6502 jam instructions which just tells your 6502 core to wait for a </div><div class='line' id='LC1261'>specified cycle count before proceeding.</div><div class='line' id='LC1262'><br/></div><div class='line' id='LC1263'><br/></div><div class='line' id='LC1264'>+----------------------------+</div><div class='line' id='LC1265'>|Emulator features to support|</div><div class='line' id='LC1266'>+----------------------------+</div><div class='line' id='LC1267'>This section merely contains some innovative and interesting suggestions for </div><div class='line' id='LC1268'>features to support in new NES emulators being developed.</div><div class='line' id='LC1269'><br/></div><div class='line' id='LC1270'><br/></div><div class='line' id='LC1271'>- Compatability with original NES/SNES controllers (a document explaining </div><div class='line' id='LC1272'>how to connect them to a PC is the &quot;NES 4 player adapter documentation&quot;). </div><div class='line' id='LC1273'>This not only allows gamers to play NES games on your emulator with an </div><div class='line' id='LC1274'>original controller/lightgun/etc. (rather than having to use the keyboard), </div><div class='line' id='LC1275'>but also allows unused buttons on a SNES controller to have customizable </div><div class='line' id='LC1276'>functionality during gameplay (game/state change, suspend, fast forward, </div><div class='line' id='LC1277'>save/load machine state, and reset functions would be most handy).</div><div class='line' id='LC1278'><br/></div><div class='line' id='LC1279'>- Fully adjustable virtual PPU framerate emulation. This control allows </div><div class='line' id='LC1280'>gamers to program on-the-fly, the PPU&#39;s framerate speed. Since pretty much </div><div class='line' id='LC1281'>all game code revolves around PPU frame interrupts, changing this frequency </div><div class='line' id='LC1282'>effectively changes the speed at which the game runs (usually controls audio </div><div class='line' id='LC1283'>as well). This can be useful for fast-forward or slow-motion effects, </div><div class='line' id='LC1284'>espically when spare controller buttons are used to accomplish the effects. </div><div class='line' id='LC1285'>Additionally, I&#39;ve discovered with my friends that playing an NES game at a </div><div class='line' id='LC1286'>higher framerate (90 Hz in our case) really adds new challenges and fun to </div><div class='line' id='LC1287'>just about any old NES game you can think of.</div><div class='line' id='LC1288'><br/></div><div class='line' id='LC1289'>- Fully adjustable virtual APU framerate emulation. For games that use this </div><div class='line' id='LC1290'>interrupt source, changing the frequency of this signal will change the </div><div class='line' id='LC1291'>playback speed of the game&#39;s audio.</div><div class='line' id='LC1292'><br/></div><div class='line' id='LC1293'>- Slow downs in NES games should be eliminated by either providing the user </div><div class='line' id='LC1294'>a way to adjust the number of CPU clocks to execute per PPU frame, or by </div><div class='line' id='LC1295'>threading the game&#39;s NMI handler. Besides, if the player wants to slow down </div><div class='line' id='LC1296'>the game action, they should be able to do it by activating a slow-motion </div><div class='line' id='LC1297'>button, as opposed to being forced to slow down simply whenever the game&#39;s </div><div class='line' id='LC1298'>frame calculations get a little too heavy for a standard 29780 2/3 cc-based </div><div class='line' id='LC1299'>frame.</div><div class='line' id='LC1300'><br/></div><div class='line' id='LC1301'>- sprites displayed per scanline should be adjustable (for development </div><div class='line' id='LC1302'>purposes), or if not, unlimited (since this eliminates *alot* of sprite </div><div class='line' id='LC1303'>flicker).</div><div class='line' id='LC1304'><br/></div><div class='line' id='LC1305'>- provide a way to let the user custom mix audio generated by any NES sound </div><div class='line' id='LC1306'>hardware used by the game, into 6 audio tracks for playback through a 5.1 </div><div class='line' id='LC1307'>soundsystem.</div><div class='line' id='LC1308'><br/></div><div class='line' id='LC1309'>- provide the user a way to program in an alternate, custom waveform to be </div><div class='line' id='LC1310'>used for triangle wave channel playback, and as well as the 4+4 duty cycles </div><div class='line' id='LC1311'>used between the rectangle wave channels. pitch bending, and programmable </div><div class='line' id='LC1312'>sound delays performed on a cloned audio channel source is also another way </div><div class='line' id='LC1313'>some neat new sounds can be heard on the NES for any old game.</div><div class='line' id='LC1314'><br/></div><div class='line' id='LC1315'>- Allow the user to specify a custom size and additional scroll offset to </div><div class='line' id='LC1316'>apply to the displayed PPU playfield (rather than just defaulting it to </div><div class='line' id='LC1317'>256*240, 0:0+ScrollCtrs) in your emulator. This not only allows gamers to </div><div class='line' id='LC1318'>crop the edges of an NES game&#39;s playfield that has messy graphics around </div><div class='line' id='LC1319'>there, but it also allows the gamer to extend the size of the playfield to </div><div class='line' id='LC1320'>include displaying the contents of 1 or 3 other nametables simultaniously, </div><div class='line' id='LC1321'>as is very useful for games like Pin Ball, Wrecking Crew, Super Mario Bros., </div><div class='line' id='LC1322'>Duck Tales, Metroid, Jackal, and Gauntlet to name a few. An option should </div><div class='line' id='LC1323'>also be provided to prevent PPU scroll counters (X or Y) from being used in </div><div class='line' id='LC1324'>the final playfield scroll offset caclulation, but rather have them applied </div><div class='line' id='LC1325'>to the offset of the object frame (this causes the objects to move around </div><div class='line' id='LC1326'>the screen, rather than having the playfield do that while objects stay </div><div class='line' id='LC1327'>relatively in the middle of the playfield).</div><div class='line' id='LC1328'><br/></div><div class='line' id='LC1329'>- Provide a graphics filter for virtual OAM set swapping. This technique is </div><div class='line' id='LC1330'>used when the game needs to display more objects than the PPU hardware </div><div class='line' id='LC1331'>supports per frame. Games alternate between two (or more) OAM sets between </div><div class='line' id='LC1332'>frames, and this does let the gamer see the extra objects, but not without </div><div class='line' id='LC1333'>having to settle for a large amount of flickering sprites. A primitive </div><div class='line' id='LC1334'>technique for filtering OAM set swaps is to extend the number of sprites </div><div class='line' id='LC1335'>displayed on any frame to include one or more from previous frames. </div><div class='line' id='LC1336'>Normally, only the last frame&#39;s OAM set needs to be saved to eliminate </div><div class='line' id='LC1337'>serious flicker from sprites in games like Mega Man 2, but somtimes two or </div><div class='line' id='LC1338'>more old OAM sets are neccessary. In this case, it&#39;s better to implement a </div><div class='line' id='LC1339'>sophisticated OAM set pattern search engine that eliminates the high </div><div class='line' id='LC1340'>overhead of re-rendering a same typed &amp; placed sprite appearing in 2 or more </div><div class='line' id='LC1341'>OAM sets.</div><div class='line' id='LC1342'><br/></div><div class='line' id='LC1343'>- Provide rewind play motion and record NES movie support. these two work </div><div class='line' id='LC1344'>together, along with save states, to produce NES movies of only your finest </div><div class='line' id='LC1345'>play performances in a favorite game.</div><div class='line' id='LC1346'><br/></div><div class='line' id='LC1347'>- Support hardware emulated FDS ROM BIOS subroutines. This essentially </div><div class='line' id='LC1348'>reduces disk load and save wait times to null. As a result, old FDS-based </div><div class='line' id='LC1349'>famicom games will run as fast as ROM-based ones.</div><div class='line' id='LC1350'><br/></div><div class='line' id='LC1351'>- Support an on-line text &amp; art galery. Users should be able to look through </div><div class='line' id='LC1352'>a collection of bitmap-formatted images relating to NES stuff (this may be </div><div class='line' id='LC1353'>screenshots, scanned pages of instruction booklets, label art, etc.). Just </div><div class='line' id='LC1354'>think of how the &quot;Super Mario All Stars&quot; game selection menu looks, and now </div><div class='line' id='LC1355'>pretend that there are many more selections, and they span off in two </div><div class='line' id='LC1356'>dimensions. Now you&#39;re talking about an interesting new feature to implement </div><div class='line' id='LC1357'>in an NES emulator.</div><div class='line' id='LC1358'><br/></div><div class='line' id='LC1359'>- Allow multiple instances of virtual NES machines in your emulator. This </div><div class='line' id='LC1360'>has the potential to allow a gamer with a very fast PC to transform their </div><div class='line' id='LC1361'>NES/FC game ROM colection into a personal home NES/FC video arcade, with the </div><div class='line' id='LC1362'>help of a high-resolution video display mode. The emulator can automatically </div><div class='line' id='LC1363'>search the local file repository to collect a list of all available NES ROM </div><div class='line' id='LC1364'>images and the like, and loads game states (initial, if no others) into </div><div class='line' id='LC1365'>virtual monitor screens emulated in the emulator&#39;s main operating window. </div><div class='line' id='LC1366'>The emulator&#39;s &quot;viewing window&quot; will allow the user to scroll around the </div><div class='line' id='LC1367'>virtual wall of NES video monitor screens; this is how the user may navigate </div><div class='line' id='LC1368'>around between different NES games and states (i.e.; we toss the concept of </div><div class='line' id='LC1369'>having to choose games and states by filename completely out the window). </div><div class='line' id='LC1370'>Game states can initially be loaded into a virtual monitor matrix based on a </div><div class='line' id='LC1371'>square spiral algorithm, but after this, cut, copy, paste, move, and delete </div><div class='line' id='LC1372'>operations could be performed on those game states to manipulate them as the </div><div class='line' id='LC1373'>user sees fit, possibly increasing or decreasing the size of the monitor </div><div class='line' id='LC1374'>matrix. And of course, personal emulation settings can be stored for each </div><div class='line' id='LC1375'>game state, so that for example, only selected NES games states will be </div><div class='line' id='LC1376'>animated during the time the NES arcade emulator runs (suspended game states </div><div class='line' id='LC1377'>can simply be displayed that way on monitors in the virtual NES arcade).</div><div class='line' id='LC1378'><br/></div><div class='line' id='LC1379'><br/></div><div class='line' id='LC1380'>+-------------------------------------------------+</div><div class='line' id='LC1381'>|New object-oriented NES file format specification|</div><div class='line' id='LC1382'>+-------------------------------------------------+</div><div class='line' id='LC1383'>This section details a new, extremely easy to use standard for digital data </div><div class='line' id='LC1384'>storage of NES ROM images and related information, which provides as much </div><div class='line' id='LC1385'>object-orientation for the individual files as possible.</div><div class='line' id='LC1386'><br/></div><div class='line' id='LC1387'><br/></div><div class='line' id='LC1388'>What does object-orientation mean?</div><div class='line' id='LC1389'>----------------------------------</div><div class='line' id='LC1390'>In this case, I&#39;m using it to describe the ability for the user to access </div><div class='line' id='LC1391'>specific information related to any NES/FC game stored ditigally on a local </div><div class='line' id='LC1392'>file repository, whether it be program ROM data, pattern table ROM data, </div><div class='line' id='LC1393'>mapper information, pictures and other digital images (label art, game </div><div class='line' id='LC1394'>manual pages, etc.), game save states, battery RAM states, etc., without </div><div class='line' id='LC1395'>having to rely on any custom or proprietary NES/FC software, simply by </div><div class='line' id='LC1396'>storing the several components that make up a digital copy of an NES game </div><div class='line' id='LC1397'>into individual files of known/established types, and grouping those files </div><div class='line' id='LC1398'>in a subdirectory folder named after the game.</div><div class='line' id='LC1399'><br/></div><div class='line' id='LC1400'>Take for example, the UNIF standard: this is an excellent example of a </div><div class='line' id='LC1401'>monolithic file format structure. UNIF is a file format that forces people </div><div class='line' id='LC1402'>to rely on UNIF-conforming tools to access the data chunks inside it, be </div><div class='line' id='LC1403'>them bitmaps, jpegs, program ROM data, etc., when if these data chunks were </div><div class='line' id='LC1404'>just stored as individual files in a directory on the local repository, </div><div class='line' id='LC1405'>there would be no need for the UNIF-guidelines to access this data.</div><div class='line' id='LC1406'><br/></div><div class='line' id='LC1407'>So basically, the idea here is to use existing file formats to store all </div><div class='line' id='LC1408'>information related to a single game, within a private directory on your </div><div class='line' id='LC1409'>filesystem amongst others, making up your electronic NES game library. All </div><div class='line' id='LC1410'>like file types may have similar extentions, while having different </div><div class='line' id='LC1411'>filenames, usually relating to the specific description of what the file </div><div class='line' id='LC1412'>represents (i.e., files relating to save state info, may have a title that </div><div class='line' id='LC1413'>describes the location or game status of the state, or patch files may </div><div class='line' id='LC1414'>describe the operation of the patch during emulation, etc). As other </div><div class='line' id='LC1415'>relivant file formats (like *.jpeg, *.gif, *.bmp, etc.) have been long </div><div class='line' id='LC1416'>established computer standards, only file formats relating to NES operation </div><div class='line' id='LC1417'>are defined here.</div><div class='line' id='LC1418'><br/></div><div class='line' id='LC1419'>*.PRG	a perfect digital copy of the game&#39;s program ROM.</div><div class='line' id='LC1420'>*.CHR	a perfect digital copy of the game&#39;s pattern table ROM, or RAM (for </div><div class='line' id='LC1421'>save states).</div><div class='line' id='LC1422'>*.MMC	a text tag, identifying the PRG/CHR ROMs complete mapper type</div><div class='line' id='LC1423'>*.INES	a classic 16-byte iNES header used as an alternative to the *.MMC </div><div class='line' id='LC1424'>file.</div><div class='line' id='LC1425'>*.WRAM	2K RAM tied to 2A03 (6502) bus</div><div class='line' id='LC1426'>*.VRAM	2K RAM tied to 2C02 bus</div><div class='line' id='LC1427'>*.XRAM	extra RAM (other than CHR RAM) used on the game cart</div><div class='line' id='LC1428'>*.SRAM	any battery-backed RAM used on the game cart</div><div class='line' id='LC1429'>*.PRGPATCH	program ROM patch</div><div class='line' id='LC1430'>*.CHRPATCH character ROM patch</div><div class='line' id='LC1431'>*.PRGHACK	text file containing a list of program ROM patches.</div><div class='line' id='LC1432'>*.CHRHACK	text file containing a list of character ROM patches.</div><div class='line' id='LC1433'><br/></div><div class='line' id='LC1434'>This list isn&#39;t complete (as 2A03, 2C02, and MMC memory structures will </div><div class='line' id='LC1435'>always be emulator-specific), but it should give you an idea of how to </div><div class='line' id='LC1436'>seperate files relating to raw dumps of large internal memory structures </div><div class='line' id='LC1437'>used inside the NES, in order to improve the portability of the ROM files, </div><div class='line' id='LC1438'>large RAM structures, save state dumps, patches, hacks, and such.</div><div class='line' id='LC1439'><br/></div><div class='line' id='LC1440'>*.PRG and *.CHR: the digital contents of program &amp; character ROMs found on </div><div class='line' id='LC1441'>the NES game board. It would be nice to see these files maintain at all </div><div class='line' id='LC1442'>times a 2^n count of bytes, except when other PRG/CHR ROMs have to be </div><div class='line' id='LC1443'>appended to their respective files, due to the possibility that an NES game </div><div class='line' id='LC1444'>may use two or more differently-sized ROMs to make up a larger one (before </div><div class='line' id='LC1445'>1987, this was mostly done to increase a game&#39;s ROM size with more chips, </div><div class='line' id='LC1446'>since it seems that ROMs larger than 32KB were just either very expensive, </div><div class='line' id='LC1447'>or not available back then). The filename always relates to the name of the </div><div class='line' id='LC1448'>game, including if it&#39;s been hacked, country it&#39;s from, or whatever. *.CHR </div><div class='line' id='LC1449'>files that are produced for save state purposes when NES game carts use </div><div class='line' id='LC1450'>CHR-RAM, use a related save state&#39;s description as a filename.</div><div class='line' id='LC1451'><br/></div><div class='line' id='LC1452'>*.MMC: simply a regular text file containing a tag of the ASCII-encoded </div><div class='line' id='LC1453'>board type that NES and Famicom games use. Use the file&#39;s size to determine </div><div class='line' id='LC1454'>length of the digital tag. The UNIF format does a pretty good job of </div><div class='line' id='LC1455'>outlining the various NES/Famicom cart board types there are; these are the </div><div class='line' id='LC1456'>text tags to use for this file. The *.MMC filename indicates the PRG ROM </div><div class='line' id='LC1457'>associated with the mapper type specified by the MMC file.</div><div class='line' id='LC1458'><br/></div><div class='line' id='LC1459'>*.INES: a 16 byte file containing the iNES header equivelant of what a *.MMC </div><div class='line' id='LC1460'>text file would normally represent. This file only exists because digital </div><div class='line' id='LC1461'>storage of NES game ROMs is currently dominated by the dated iNES format. </div><div class='line' id='LC1462'>Support is not recommended in new emulators (if you&#39;re not part of the </div><div class='line' id='LC1463'>solution, you&#39;re part of the problem, right?).</div><div class='line' id='LC1464'><br/></div><div class='line' id='LC1465'>*.WRAM, *.VRAM, *.XRAM: these all define files which contain mirror images </div><div class='line' id='LC1466'>of the RAM chips they represent in the NES being emulated. The filename for </div><div class='line' id='LC1467'>all of them relates to the save state description.</div><div class='line' id='LC1468'><br/></div><div class='line' id='LC1469'>*.SRAM: defines the game&#39;s battery-backed RAM area. Filename relates to </div><div class='line' id='LC1470'>description of backed-up RAM (game and state specific). Maintaining multiple </div><div class='line' id='LC1471'>copies of SRAM is useful for storing more saved game data than just one SRAM </div><div class='line' id='LC1472'>file allows (which is usually 3 save files per SRAM, though this is always </div><div class='line' id='LC1473'>game specific).</div><div class='line' id='LC1474'><br/></div><div class='line' id='LC1475'>*.PRGPATCH, *.CHRPATCH: These files contain a (little-endian) 32-bit offset, </div><div class='line' id='LC1476'>followed by the raw data to be patched into the ROM type indicated by the </div><div class='line' id='LC1477'>extention. Filename here always relates to the effects the patch has during </div><div class='line' id='LC1478'>emulation. Filesize is used to determine the length of the patch (minus 4 to </div><div class='line' id='LC1479'>exclude the offset value).</div><div class='line' id='LC1480'><br/></div><div class='line' id='LC1481'>*.PRGHACK, *.CHRHACK: these files define lists in plain text that define the </div><div class='line' id='LC1482'>patch files to apply to game emulation, when this specific HACK file is </div><div class='line' id='LC1483'>chosen to be applied for the emulated game. The filename relates to the </div><div class='line' id='LC1484'>group of patches you&#39;ve chosen for this file (normally, this doesn&#39;t matter, </div><div class='line' id='LC1485'>but it&#39;s useful for storing multiple hack profiles (ones that make the game </div><div class='line' id='LC1486'>easier, harder, wierd, behave like an NSF file, change graphics, etc)). Use </div><div class='line' id='LC1487'>ASCII formfeed and/or carriage return codes (13 and 10) to seperate listed </div><div class='line' id='LC1488'>patch types in the file.</div><div class='line' id='LC1489'><br/></div><div class='line' id='LC1490'><br/></div><div class='line' id='LC1491'>notes</div><div class='line' id='LC1492'>-----</div><div class='line' id='LC1493'>- when more than one file of type *.PRG, *.CHR (when not RAM-based), or </div><div class='line' id='LC1494'>*.SRAM is stored in a single game&#39;s directory, the emulator is responsible </div><div class='line' id='LC1495'>for making sure the gamer may select the active RAM/ROM(s) to use during </div><div class='line' id='LC1496'>emulation, since game emulation can only be based on one source of these.</div><div class='line' id='LC1497'><br/></div><div class='line' id='LC1498'>- the emulator must have the ability to detect &amp; present all the different </div><div class='line' id='LC1499'>HACK files available in a game&#39;s directory, since the effects of only a </div><div class='line' id='LC1500'>single HACK file may be applied to a selected game ROM in there.</div><div class='line' id='LC1501'><br/></div><div class='line' id='LC1502'>- Any emulator-specific file formats should be clearly documented by the </div><div class='line' id='LC1503'>author.</div><div class='line' id='LC1504'><br/></div><div class='line' id='LC1505'>- Any game ROMs that do not have a matching MMC-typed filename in the same </div><div class='line' id='LC1506'>directory, should cause the emulator to refuse to emulate the game ROMs.</div><div class='line' id='LC1507'><br/></div><div class='line' id='LC1508'>- This format _does_ complicate the transportation of NES ROM files a bit </div><div class='line' id='LC1509'>for general emulator users/gamers, but in the end, there&#39;s only the PRG, </div><div class='line' id='LC1510'>MMC, and optional CHR and SRAM-typed files required for transport (so, 2..4 </div><div class='line' id='LC1511'>files max). This is hardly difficult for even a basic user to comprehend.</div><div class='line' id='LC1512'><br/></div><div class='line' id='LC1513'><br/></div><div class='line' id='LC1514'>EOF</div></pre></div></td>
         </tr>
       </table>
  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.08327s from github-fe126-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-x close js-ajax-error-dismiss" aria-label="Dismiss error"></a>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-df9e4beac80276ed3dfa56be0d97b536d0f5ee12.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-534eef699bbadaf1454b432e14a2ab0a68c7ddf4.js" type="text/javascript"></script>
      
      
        <script async src="https://www.google-analytics.com/analytics.js"></script>
  </body>
</html>

